
MPU9250_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab0  08003ab0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab8  08003ab8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000756a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b5  00000000  00000000  0002760a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  00029408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b64  00000000  00000000  00029a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007d97  00000000  00000000  0004a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c39a1  00000000  00000000  00052383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115d24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023dc  00000000  00000000  00115d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039c0 	.word	0x080039c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080039c0 	.word	0x080039c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000588:	f7ff fff4 	bl	8000574 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2110      	movs	r1, #16
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <MPU9250_Activate+0x18>)
 8000592:	f001 f82f 	bl	80015f4 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000

080005a0 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <MPU9250_Deactivate+0x14>)
 80005aa:	f001 f823 	bl	80015f4 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000

080005b8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80005c6:	f107 020f 	add.w	r2, r7, #15
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <SPIx_WriteRead+0x38>)
 80005d6:	f001 ff61 	bl	800249c <HAL_SPI_TransmitReceive>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80005e0:	23ff      	movs	r3, #255	; 0xff
 80005e2:	e000      	b.n	80005e6 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000a8 	.word	0x200000a8

080005f4 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
 8000600:	4613      	mov	r3, r2
 8000602:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000604:	f7ff ffbe 	bl	8000584 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffd4 	bl	80005b8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000610:	e00a      	b.n	8000628 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffce 	bl	80005b8 <SPIx_WriteRead>
		NumByteToWrite--;
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8000628:	883b      	ldrh	r3, [r7, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f1      	bne.n	8000612 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800062e:	f7ff ffb7 	bl	80005a0 <MPU9250_Deactivate>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
 8000648:	4613      	mov	r3, r2
 800064a:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 800064c:	f7ff ff9a 	bl	8000584 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	4313      	orrs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800065a:	f107 010f 	add.w	r1, r7, #15
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	2201      	movs	r2, #1
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <MPU_SPI_Read+0x48>)
 8000666:	f001 fccc 	bl	8002002 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 800066a:	883a      	ldrh	r2, [r7, #0]
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <MPU_SPI_Read+0x48>)
 8000674:	f001 fe01 	bl	800227a <HAL_SPI_Receive>
	MPU9250_Deactivate();
 8000678:	f7ff ff92 	bl	80005a0 <MPU9250_Deactivate>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000a8 	.word	0x200000a8

08000688 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8000698:	79f9      	ldrb	r1, [r7, #7]
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	2201      	movs	r2, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffa8 	bl	80005f4 <MPU_SPI_Write>
	HAL_Delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fcff 	bl	80010a8 <HAL_Delay>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	603a      	str	r2, [r7, #0]
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	460b      	mov	r3, r1
 80006c0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4619      	mov	r1, r3
 80006ca:	6838      	ldr	r0, [r7, #0]
 80006cc:	f7ff ffb6 	bl	800063c <MPU_SPI_Read>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80006e8:	2325      	movs	r3, #37	; 0x25
 80006ea:	220c      	movs	r2, #12
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffca 	bl	8000688 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80006f4:	2226      	movs	r2, #38	; 0x26
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4610      	mov	r0, r2
 80006fc:	f7ff ffc4 	bl	8000688 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000700:	2263      	movs	r2, #99	; 0x63
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	4610      	mov	r0, r2
 8000708:	f7ff ffbe 	bl	8000688 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 800070c:	2227      	movs	r2, #39	; 0x27
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	4610      	mov	r0, r2
 800071a:	f7ff ffb5 	bl	8000688 <writeRegister>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	603a      	str	r2, [r7, #0]
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	460b      	mov	r3, r1
 8000734:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8000736:	2025      	movs	r0, #37	; 0x25
 8000738:	220c      	movs	r2, #12
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	4313      	orrs	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	f7ff ffa1 	bl	8000688 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000746:	2226      	movs	r2, #38	; 0x26
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4619      	mov	r1, r3
 800074c:	4610      	mov	r0, r2
 800074e:	f7ff ff9b 	bl	8000688 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000752:	2027      	movs	r0, #39	; 0x27
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	4313      	orrs	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	f7ff ff93 	bl	8000688 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fca0 	bl	80010a8 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8000768:	2049      	movs	r0, #73	; 0x49
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	f7ff ff9f 	bl	80006b2 <readRegisters>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000780:	2375      	movs	r3, #117	; 0x75
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <whoAmI+0x18>)
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff93 	bl	80006b2 <readRegisters>

	// return the register value
	return _buffer[0];
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <whoAmI+0x18>)
 800078e:	781b      	ldrb	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000008c 	.word	0x2000008c

08000798 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 800079c:	2300      	movs	r3, #0
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <whoAmIAK8963+0x18>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffbf 	bl	8000726 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 80007a8:	4b01      	ldr	r3, [pc, #4]	; (80007b0 <whoAmIAK8963+0x18>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000008c 	.word	0x2000008c

080007b4 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80007ba:	236b      	movs	r3, #107	; 0x6b
 80007bc:	2201      	movs	r2, #1
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff61 	bl	8000688 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80007c6:	236a      	movs	r3, #106	; 0x6a
 80007c8:	2220      	movs	r2, #32
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5b 	bl	8000688 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80007d2:	2324      	movs	r3, #36	; 0x24
 80007d4:	220d      	movs	r2, #13
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff55 	bl	8000688 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80007de:	230a      	movs	r3, #10
 80007e0:	2200      	movs	r2, #0
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff77 	bl	80006d8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80007ea:	236b      	movs	r3, #107	; 0x6b
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff49 	bl	8000688 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fc56 	bl	80010a8 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80007fc:	230b      	movs	r3, #11
 80007fe:	2201      	movs	r2, #1
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff68 	bl	80006d8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000808:	236b      	movs	r3, #107	; 0x6b
 800080a:	2201      	movs	r2, #1
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff3a 	bl	8000688 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000814:	f7ff ffb2 	bl	800077c <whoAmI>
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b71      	cmp	r3, #113	; 0x71
 8000820:	d004      	beq.n	800082c <MPU9250_Init+0x78>
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b73      	cmp	r3, #115	; 0x73
 8000826:	d001      	beq.n	800082c <MPU9250_Init+0x78>
	{
		return 1;
 8000828:	2301      	movs	r3, #1
 800082a:	e06c      	b.n	8000906 <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 800082c:	236c      	movs	r3, #108	; 0x6c
 800082e:	2200      	movs	r2, #0
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff28 	bl	8000688 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8000838:	231c      	movs	r3, #28
 800083a:	2218      	movs	r2, #24
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff22 	bl	8000688 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000844:	231b      	movs	r3, #27
 8000846:	2200      	movs	r2, #0
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff1c 	bl	8000688 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8000850:	231d      	movs	r3, #29
 8000852:	2201      	movs	r2, #1
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff16 	bl	8000688 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 800085c:	231a      	movs	r3, #26
 800085e:	2201      	movs	r2, #1
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff10 	bl	8000688 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8000868:	2319      	movs	r3, #25
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff0b 	bl	8000688 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8000872:	236a      	movs	r3, #106	; 0x6a
 8000874:	2220      	movs	r2, #32
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff05 	bl	8000688 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800087e:	2324      	movs	r3, #36	; 0x24
 8000880:	220d      	movs	r2, #13
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff feff 	bl	8000688 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800088a:	f7ff ff85 	bl	8000798 <whoAmIAK8963>
 800088e:	4603      	mov	r3, r0
 8000890:	2b48      	cmp	r3, #72	; 0x48
 8000892:	d001      	beq.n	8000898 <MPU9250_Init+0xe4>
	{
		return 1;
 8000894:	2301      	movs	r3, #1
 8000896:	e036      	b.n	8000906 <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000898:	230a      	movs	r3, #10
 800089a:	2200      	movs	r2, #0
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff1a 	bl	80006d8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fbff 	bl	80010a8 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80008aa:	230a      	movs	r3, #10
 80008ac:	220f      	movs	r2, #15
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff11 	bl	80006d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 fbf6 	bl	80010a8 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80008bc:	2310      	movs	r3, #16
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MPU9250_Init+0x15c>)
 80008c0:	2103      	movs	r1, #3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff2f 	bl	8000726 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80008c8:	230a      	movs	r3, #10
 80008ca:	2200      	movs	r2, #0
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff02 	bl	80006d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f000 fbe7 	bl	80010a8 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80008da:	230a      	movs	r3, #10
 80008dc:	2216      	movs	r2, #22
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fef9 	bl	80006d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f000 fbde 	bl	80010a8 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80008ec:	236b      	movs	r3, #107	; 0x6b
 80008ee:	2201      	movs	r2, #1
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fec8 	bl	8000688 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80008f8:	2303      	movs	r3, #3
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <MPU9250_Init+0x160>)
 80008fc:	2107      	movs	r1, #7
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff11 	bl	8000726 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a4 	.word	0x200000a4
 8000914:	2000008c 	.word	0x2000008c

08000918 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8000924:	233b      	movs	r3, #59	; 0x3b
 8000926:	4a63      	ldr	r2, [pc, #396]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000928:	2115      	movs	r1, #21
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fec1 	bl	80006b2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8000930:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <MPU9250_GetData+0x19c>)
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21a      	sxth	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8000946:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000948:	789b      	ldrb	r3, [r3, #2]
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	b219      	sxth	r1, r3
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	b21a      	sxth	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3302      	adds	r3, #2
 8000958:	430a      	orrs	r2, r1
 800095a:	b212      	sxth	r2, r2
 800095c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b219      	sxth	r1, r3
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	b21a      	sxth	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3304      	adds	r3, #4
 8000970:	430a      	orrs	r2, r1
 8000972:	b212      	sxth	r2, r2
 8000974:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b21a      	sxth	r2, r3
 800097e:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000980:	7a5b      	ldrb	r3, [r3, #9]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 800098c:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <MPU9250_GetData+0x19c>)
 800098e:	7a9b      	ldrb	r3, [r3, #10]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b219      	sxth	r1, r3
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <MPU9250_GetData+0x19c>)
 8000996:	7adb      	ldrb	r3, [r3, #11]
 8000998:	b21a      	sxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3302      	adds	r3, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	b212      	sxth	r2, r2
 80009a2:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b219      	sxth	r1, r3
 80009ac:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009ae:	7b5b      	ldrb	r3, [r3, #13]
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3304      	adds	r3, #4
 80009b6:	430a      	orrs	r2, r1
 80009b8:	b212      	sxth	r2, r2
 80009ba:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009be:	7bdb      	ldrb	r3, [r3, #15]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009c6:	7b9b      	ldrb	r3, [r3, #14]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009d0:	7c5b      	ldrb	r3, [r3, #17]
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009d8:	7c1b      	ldrb	r3, [r3, #16]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009e2:	7cdb      	ldrb	r3, [r3, #19]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <MPU9250_GetData+0x19c>)
 80009ea:	7c9b      	ldrb	r3, [r3, #18]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80009f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MPU9250_GetData+0x1a0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3b80      	subs	r3, #128	; 0x80
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a0c:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8000abc <MPU9250_GetData+0x1a4>
 8000a10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8000a2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MPU9250_GetData+0x1a0>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	3b80      	subs	r3, #128	; 0x80
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a48:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000abc <MPU9250_GetData+0x1a4>
 8000a4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3302      	adds	r3, #2
 8000a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a64:	ee17 2a90 	vmov	r2, s15
 8000a68:	b212      	sxth	r2, r2
 8000a6a:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8000a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MPU9250_GetData+0x1a0>)
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	3b80      	subs	r3, #128	; 0x80
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a86:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8000abc <MPU9250_GetData+0x1a4>
 8000a8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa2:	ee17 2a90 	vmov	r2, s15
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	801a      	strh	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000008c 	.word	0x2000008c
 8000ab8:	200000a4 	.word	0x200000a4
 8000abc:	43800000 	.word	0x43800000

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac2:	b08d      	sub	sp, #52	; 0x34
 8000ac4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fa7d 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f833 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 f8d1 	bl	8000c74 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ad2:	f000 f899 	bl	8000c08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Init();
 8000ad6:	f7ff fe6d 	bl	80007b4 <MPU9250_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int16_t AccData[3], GyroData[3], MagData[3];
	  MPU9250_GetData(AccData, GyroData, MagData);
 8000ada:	463a      	mov	r2, r7
 8000adc:	f107 0108 	add.w	r1, r7, #8
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff17 	bl	8000918 <MPU9250_GetData>

	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
	    (int16_t)AccData[0], (int16_t)AccData[1], (int16_t)AccData[2],
 8000aea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
 8000aee:	461e      	mov	r6, r3
	    (int16_t)AccData[0], (int16_t)AccData[1], (int16_t)AccData[2],
 8000af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
 8000af4:	469c      	mov	ip, r3
	    (int16_t)AccData[0], (int16_t)AccData[1], (int16_t)AccData[2],
 8000af6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
 8000afa:	469e      	mov	lr, r3
	    (int16_t)GyroData[0], (int16_t)GyroData[1], (int16_t)GyroData[2],
 8000afc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b04:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
	    (int16_t)MagData[0], (int16_t)MagData[1], (int16_t)MagData[2]);
 8000b08:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000b0c:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8000b10:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
	  printf("%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\n",
 8000b14:	9505      	str	r5, [sp, #20]
 8000b16:	9404      	str	r4, [sp, #16]
 8000b18:	9003      	str	r0, [sp, #12]
 8000b1a:	9102      	str	r1, [sp, #8]
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4673      	mov	r3, lr
 8000b22:	4662      	mov	r2, ip
 8000b24:	4631      	mov	r1, r6
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <main+0x70>)
 8000b28:	f001 ffbc 	bl	8002aa4 <iprintf>
  {
 8000b2c:	e7d5      	b.n	8000ada <main+0x1a>
 8000b2e:	bf00      	nop
 8000b30:	080039d8 	.word	0x080039d8

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 ffa6 	bl	8002a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a27      	ldr	r2, [pc, #156]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <SystemClock_Config+0xcc>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ba8:	23a8      	movs	r3, #168	; 0xa8
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fd35 	bl	8001628 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc4:	f000 f87e 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2105      	movs	r1, #5
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 ff96 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bf2:	f000 f867 	bl	8000cc4 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	; 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000

08000c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c5a:	f001 f949 	bl	8001ef0 <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c64:	f000 f82e 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000a8 	.word	0x200000a8
 8000c70:	40013000 	.word	0x40013000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_GPIO_Init+0x4c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23f0      	movs	r3, #240	; 0xf0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d96:	f000 fa91 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f934 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <_read+0x12>
	}

return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e009      	b.n	8000e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf1      	blt.n	8000e50 <_write+0x12>
	}
	return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f001 fd96 	bl	8002a40 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20020000 	.word	0x20020000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000100 	.word	0x20000100
 8000f48:	20000118 	.word	0x20000118

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd7 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f001 fd55 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fd8d 	bl	8000ac0 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fb4:	08003ac0 	.word	0x08003ac0
  ldr r2, =_sbss
 8000fb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fbc:	20000118 	.word	0x20000118

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f931 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe6a 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f93b 	bl	80012a2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f911 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000104 	.word	0x20000104

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000104 	.word	0x20000104

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff47 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5c 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb0 	bl	8001210 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e16b      	b.n	80015b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 815a 	bne.w	80015aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b4 	beq.w	80015aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <HAL_GPIO_Init+0x310>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_GPIO_Init+0x314>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02b      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x318>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x222>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_GPIO_Init+0x31c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x21e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x320>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x324>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x328>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x32c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x330>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x20a>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00e      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014c6:	2308      	movs	r3, #8
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x310>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x334>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f ae90 	bls.w	80012d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40021400 	.word	0x40021400
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40021c00 	.word	0x40021c00
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e267      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e242      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fcd6 	bl	8001090 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fcd2 	bl	8001090 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e207      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fcc2 	bl	8001090 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fcbe 	bl	8001090 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1f3      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1c7      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x244>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fc77 	bl	8001090 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fc73 	bl	8001090 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1a8      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x244>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc56 	bl	8001090 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fc52 	bl	8001090 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e187      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fc36 	bl	8001090 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fc32 	bl	8001090 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e167      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fc1f 	bl	8001090 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fc1b 	bl	8001090 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e150      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8097 	beq.w	80019bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fbdb 	bl	8001090 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff fbd7 	bl	8001090 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e10c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fb9c 	bl	8001090 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff fb98 	bl	8001090 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0cb      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ee      	beq.n	800195c <HAL_RCC_OscConfig+0x334>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fb86 	bl	8001090 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff fb82 	bl	8001090 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0b5      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ee      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a1 	beq.w	8001b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d05c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d141      	bne.n	8001a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb56 	bl	8001090 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fb52 	bl	8001090 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e087      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fb2b 	bl	8001090 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fb27 	bl	8001090 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e05c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x416>
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fb14 	bl	8001090 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fb10 	bl	8001090 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e045      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e038      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d90c      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d044      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e067      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff fa42 	bl	8001090 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff fa3e 	bl	8001090 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20c      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9a2 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08003a08 	.word	0x08003a08
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b094      	sub	sp, #80	; 0x50
 8001cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d00d      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f200 80e1 	bhi.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d16:	e0db      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d1c:	e0db      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_GetSysClockFreq+0x208>)
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d22:	e0d8      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
 8001d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d56:	4622      	mov	r2, r4
 8001d58:	462b      	mov	r3, r5
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	0159      	lsls	r1, r3, #5
 8001d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d68:	0150      	lsls	r0, r2, #5
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4621      	mov	r1, r4
 8001d70:	1a51      	subs	r1, r2, r1
 8001d72:	6139      	str	r1, [r7, #16]
 8001d74:	4629      	mov	r1, r5
 8001d76:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d88:	4659      	mov	r1, fp
 8001d8a:	018b      	lsls	r3, r1, #6
 8001d8c:	4651      	mov	r1, sl
 8001d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d92:	4651      	mov	r1, sl
 8001d94:	018a      	lsls	r2, r1, #6
 8001d96:	4651      	mov	r1, sl
 8001d98:	ebb2 0801 	subs.w	r8, r2, r1
 8001d9c:	4659      	mov	r1, fp
 8001d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db6:	4690      	mov	r8, r2
 8001db8:	4699      	mov	r9, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	eb18 0303 	adds.w	r3, r8, r3
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	eb49 0303 	adc.w	r3, r9, r3
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	024b      	lsls	r3, r1, #9
 8001dda:	4621      	mov	r1, r4
 8001ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001de0:	4621      	mov	r1, r4
 8001de2:	024a      	lsls	r2, r1, #9
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dea:	2200      	movs	r2, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001df4:	f7fe fa3c 	bl	8000270 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e00:	e058      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	0159      	lsls	r1, r3, #5
 8001e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2e:	0150      	lsls	r0, r2, #5
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4641      	mov	r1, r8
 8001e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e54:	ebb2 040a 	subs.w	r4, r2, sl
 8001e58:	eb63 050b 	sbc.w	r5, r3, fp
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	00eb      	lsls	r3, r5, #3
 8001e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e6a:	00e2      	lsls	r2, r4, #3
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	461d      	mov	r5, r3
 8001e70:	4643      	mov	r3, r8
 8001e72:	18e3      	adds	r3, r4, r3
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	464b      	mov	r3, r9
 8001e78:	eb45 0303 	adc.w	r3, r5, r3
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	028b      	lsls	r3, r1, #10
 8001e8e:	4621      	mov	r1, r4
 8001e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e94:	4621      	mov	r1, r4
 8001e96:	028a      	lsls	r2, r1, #10
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	61fa      	str	r2, [r7, #28]
 8001ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea8:	f7fe f9e2 	bl	8000270 <__aeabi_uldivmod>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3750      	adds	r7, #80	; 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07b      	b.n	8001ffa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f12:	d009      	beq.n	8001f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe feec 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	ea42 0103 	orr.w	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0104 	and.w	r1, r3, #4
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f003 0210 	and.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b088      	sub	sp, #32
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_SPI_Transmit+0x22>
 8002020:	2302      	movs	r3, #2
 8002022:	e126      	b.n	8002272 <HAL_SPI_Transmit+0x270>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800202c:	f7ff f830 	bl	8001090 <HAL_GetTick>
 8002030:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d002      	beq.n	8002048 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002042:	2302      	movs	r3, #2
 8002044:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002046:	e10b      	b.n	8002260 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Transmit+0x52>
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002058:	e102      	b.n	8002260 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2203      	movs	r2, #3
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a0:	d10f      	bne.n	80020c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d007      	beq.n	80020e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e8:	d14b      	bne.n	8002182 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_SPI_Transmit+0xf6>
 80020f2:	8afb      	ldrh	r3, [r7, #22]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d13e      	bne.n	8002176 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	1c9a      	adds	r2, r3, #2
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800211c:	e02b      	b.n	8002176 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b02      	cmp	r3, #2
 800212a:	d112      	bne.n	8002152 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	1c9a      	adds	r2, r3, #2
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002150:	e011      	b.n	8002176 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002152:	f7fe ff9d 	bl	8001090 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d803      	bhi.n	800216a <HAL_SPI_Transmit+0x168>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d102      	bne.n	8002170 <HAL_SPI_Transmit+0x16e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002174:	e074      	b.n	8002260 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ce      	bne.n	800211e <HAL_SPI_Transmit+0x11c>
 8002180:	e04c      	b.n	800221c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_SPI_Transmit+0x18e>
 800218a:	8afb      	ldrh	r3, [r7, #22]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d140      	bne.n	8002212 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021b6:	e02c      	b.n	8002212 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d113      	bne.n	80021ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ec:	e011      	b.n	8002212 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ee:	f7fe ff4f 	bl	8001090 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d803      	bhi.n	8002206 <HAL_SPI_Transmit+0x204>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x20a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002210:	e026      	b.n	8002260 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1cd      	bne.n	80021b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fbcb 	bl	80029bc <SPI_EndRxTxTransaction>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	e000      	b.n	8002260 <HAL_SPI_Transmit+0x25e>
  }

error:
 800225e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002270:	7ffb      	ldrb	r3, [r7, #31]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b088      	sub	sp, #32
 800227e:	af02      	add	r7, sp, #8
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002296:	d112      	bne.n	80022be <HAL_SPI_Receive+0x44>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10e      	bne.n	80022be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2204      	movs	r2, #4
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8f1 	bl	800249c <HAL_SPI_TransmitReceive>
 80022ba:	4603      	mov	r3, r0
 80022bc:	e0ea      	b.n	8002494 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_SPI_Receive+0x52>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0e3      	b.n	8002494 <HAL_SPI_Receive+0x21a>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d4:	f7fe fedc 	bl	8001090 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ea:	e0ca      	b.n	8002482 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Receive+0x7e>
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022fc:	e0c1      	b.n	8002482 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2204      	movs	r2, #4
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002344:	d10f      	bne.n	8002366 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d007      	beq.n	8002384 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d162      	bne.n	8002452 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800238c:	e02e      	b.n	80023ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d115      	bne.n	80023c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f103 020c 	add.w	r2, r3, #12
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023c6:	e011      	b.n	80023ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c8:	f7fe fe62 	bl	8001090 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d803      	bhi.n	80023e0 <HAL_SPI_Receive+0x166>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d102      	bne.n	80023e6 <HAL_SPI_Receive+0x16c>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023ea:	e04a      	b.n	8002482 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1cb      	bne.n	800238e <HAL_SPI_Receive+0x114>
 80023f6:	e031      	b.n	800245c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d113      	bne.n	800242e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	b292      	uxth	r2, r2
 8002412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800242c:	e011      	b.n	8002452 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe fe2f 	bl	8001090 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d803      	bhi.n	8002446 <HAL_SPI_Receive+0x1cc>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d102      	bne.n	800244c <HAL_SPI_Receive+0x1d2>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002450:	e017      	b.n	8002482 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1cd      	bne.n	80023f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fa45 	bl	80028f0 <SPI_EndRxTransaction>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
 800247e:	e000      	b.n	8002482 <HAL_SPI_Receive+0x208>
  }

error :
 8002480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x26>
 80024be:	2302      	movs	r3, #2
 80024c0:	e18a      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x33c>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ca:	f7fe fde1 	bl	8001090 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00f      	beq.n	800250c <HAL_SPI_TransmitReceive+0x70>
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f2:	d107      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x68>
 80024fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002500:	2b04      	cmp	r3, #4
 8002502:	d003      	beq.n	800250c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800250a:	e15b      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_SPI_TransmitReceive+0x82>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_SPI_TransmitReceive+0x82>
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002524:	e14e      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d007      	beq.n	800258e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002596:	d178      	bne.n	800268a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_TransmitReceive+0x10a>
 80025a0:	8b7b      	ldrh	r3, [r7, #26]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d166      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ca:	e053      	b.n	8002674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d11b      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x176>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_SPI_TransmitReceive+0x176>
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d113      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	1c9a      	adds	r2, r3, #2
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d119      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x1b8>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d014      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	b292      	uxth	r2, r2
 8002636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	1c9a      	adds	r2, r3, #2
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002654:	f7fe fd1c 	bl	8001090 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002660:	429a      	cmp	r2, r3
 8002662:	d807      	bhi.n	8002674 <HAL_SPI_TransmitReceive+0x1d8>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d003      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002672:	e0a7      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1a6      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x130>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1a1      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x130>
 8002688:	e07c      	b.n	8002784 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x1fc>
 8002692:	8b7b      	ldrh	r3, [r7, #26]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d16b      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026be:	e057      	b.n	8002770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d11c      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x26c>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d017      	beq.n	8002708 <HAL_SPI_TransmitReceive+0x26c>
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d114      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d119      	bne.n	800274a <HAL_SPI_TransmitReceive+0x2ae>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d014      	beq.n	800274a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002746:	2301      	movs	r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800274a:	f7fe fca1 	bl	8001090 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002756:	429a      	cmp	r2, r3
 8002758:	d803      	bhi.n	8002762 <HAL_SPI_TransmitReceive+0x2c6>
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d102      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x2cc>
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800276e:	e029      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1a2      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x224>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d19d      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f917 	bl	80029bc <SPI_EndRxTxTransaction>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027a0:	e010      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	e000      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3730      	adds	r7, #48	; 0x30
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f0:	f7fe fc4e 	bl	8001090 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002800:	f7fe fc46 	bl	8001090 <HAL_GetTick>
 8002804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	0d1b      	lsrs	r3, r3, #20
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002816:	e054      	b.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d050      	beq.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002820:	f7fe fc36 	bl	8001090 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	429a      	cmp	r2, r3
 800282e:	d902      	bls.n	8002836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d13d      	bne.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284e:	d111      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	d004      	beq.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d107      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d10f      	bne.n	800289e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e017      	b.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3b01      	subs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4013      	ands	r3, r2
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	bf0c      	ite	eq
 80028d2:	2301      	moveq	r3, #1
 80028d4:	2300      	movne	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d19b      	bne.n	8002818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002904:	d111      	bne.n	800292a <SPI_EndRxTransaction+0x3a>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d004      	beq.n	800291a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d107      	bne.n	800292a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002932:	d12a      	bne.n	800298a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d012      	beq.n	8002964 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2200      	movs	r2, #0
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff ff49 	bl	80027e0 <SPI_WaitFlagStateUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02d      	beq.n	80029b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e026      	b.n	80029b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	2101      	movs	r1, #1
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff ff36 	bl	80027e0 <SPI_WaitFlagStateUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e013      	b.n	80029b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	2101      	movs	r1, #1
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ff23 	bl	80027e0 <SPI_WaitFlagStateUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e000      	b.n	80029b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <SPI_EndRxTxTransaction+0x7c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <SPI_EndRxTxTransaction+0x80>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0d5b      	lsrs	r3, r3, #21
 80029d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e6:	d112      	bne.n	8002a0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff fef4 	bl	80027e0 <SPI_WaitFlagStateUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e00f      	b.n	8002a2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d0f2      	beq.n	8002a0e <SPI_EndRxTxTransaction+0x52>
 8002a28:	e000      	b.n	8002a2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a2a:	bf00      	nop
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	165e9f81 	.word	0x165e9f81

08002a40 <__errno>:
 8002a40:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <__errno+0x8>)
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4d0d      	ldr	r5, [pc, #52]	; (8002a84 <__libc_init_array+0x38>)
 8002a50:	4c0d      	ldr	r4, [pc, #52]	; (8002a88 <__libc_init_array+0x3c>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	2600      	movs	r6, #0
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	4d0b      	ldr	r5, [pc, #44]	; (8002a8c <__libc_init_array+0x40>)
 8002a5e:	4c0c      	ldr	r4, [pc, #48]	; (8002a90 <__libc_init_array+0x44>)
 8002a60:	f000 ffae 	bl	80039c0 <_init>
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	2600      	movs	r6, #0
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08003ab8 	.word	0x08003ab8
 8002a88:	08003ab8 	.word	0x08003ab8
 8002a8c:	08003ab8 	.word	0x08003ab8
 8002a90:	08003abc 	.word	0x08003abc

08002a94 <memset>:
 8002a94:	4402      	add	r2, r0
 8002a96:	4603      	mov	r3, r0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <memset+0xa>
 8002a9c:	4770      	bx	lr
 8002a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa2:	e7f9      	b.n	8002a98 <memset+0x4>

08002aa4 <iprintf>:
 8002aa4:	b40f      	push	{r0, r1, r2, r3}
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <iprintf+0x2c>)
 8002aa8:	b513      	push	{r0, r1, r4, lr}
 8002aaa:	681c      	ldr	r4, [r3, #0]
 8002aac:	b124      	cbz	r4, 8002ab8 <iprintf+0x14>
 8002aae:	69a3      	ldr	r3, [r4, #24]
 8002ab0:	b913      	cbnz	r3, 8002ab8 <iprintf+0x14>
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f000 f866 	bl	8002b84 <__sinit>
 8002ab8:	ab05      	add	r3, sp, #20
 8002aba:	9a04      	ldr	r2, [sp, #16]
 8002abc:	68a1      	ldr	r1, [r4, #8]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f000 f9bd 	bl	8002e40 <_vfiprintf_r>
 8002ac6:	b002      	add	sp, #8
 8002ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002acc:	b004      	add	sp, #16
 8002ace:	4770      	bx	lr
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <std>:
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	b510      	push	{r4, lr}
 8002ad8:	4604      	mov	r4, r0
 8002ada:	e9c0 3300 	strd	r3, r3, [r0]
 8002ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ae2:	6083      	str	r3, [r0, #8]
 8002ae4:	8181      	strh	r1, [r0, #12]
 8002ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ae8:	81c2      	strh	r2, [r0, #14]
 8002aea:	6183      	str	r3, [r0, #24]
 8002aec:	4619      	mov	r1, r3
 8002aee:	2208      	movs	r2, #8
 8002af0:	305c      	adds	r0, #92	; 0x5c
 8002af2:	f7ff ffcf 	bl	8002a94 <memset>
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <std+0x38>)
 8002af8:	6263      	str	r3, [r4, #36]	; 0x24
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <std+0x3c>)
 8002afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <std+0x40>)
 8002b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <std+0x44>)
 8002b04:	6224      	str	r4, [r4, #32]
 8002b06:	6323      	str	r3, [r4, #48]	; 0x30
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	bf00      	nop
 8002b0c:	080033e9 	.word	0x080033e9
 8002b10:	0800340b 	.word	0x0800340b
 8002b14:	08003443 	.word	0x08003443
 8002b18:	08003467 	.word	0x08003467

08002b1c <_cleanup_r>:
 8002b1c:	4901      	ldr	r1, [pc, #4]	; (8002b24 <_cleanup_r+0x8>)
 8002b1e:	f000 b8af 	b.w	8002c80 <_fwalk_reent>
 8002b22:	bf00      	nop
 8002b24:	08003741 	.word	0x08003741

08002b28 <__sfmoreglue>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	2268      	movs	r2, #104	; 0x68
 8002b2c:	1e4d      	subs	r5, r1, #1
 8002b2e:	4355      	muls	r5, r2
 8002b30:	460e      	mov	r6, r1
 8002b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b36:	f000 f8e5 	bl	8002d04 <_malloc_r>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	b140      	cbz	r0, 8002b50 <__sfmoreglue+0x28>
 8002b3e:	2100      	movs	r1, #0
 8002b40:	e9c0 1600 	strd	r1, r6, [r0]
 8002b44:	300c      	adds	r0, #12
 8002b46:	60a0      	str	r0, [r4, #8]
 8002b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b4c:	f7ff ffa2 	bl	8002a94 <memset>
 8002b50:	4620      	mov	r0, r4
 8002b52:	bd70      	pop	{r4, r5, r6, pc}

08002b54 <__sfp_lock_acquire>:
 8002b54:	4801      	ldr	r0, [pc, #4]	; (8002b5c <__sfp_lock_acquire+0x8>)
 8002b56:	f000 b8b3 	b.w	8002cc0 <__retarget_lock_acquire_recursive>
 8002b5a:	bf00      	nop
 8002b5c:	20000109 	.word	0x20000109

08002b60 <__sfp_lock_release>:
 8002b60:	4801      	ldr	r0, [pc, #4]	; (8002b68 <__sfp_lock_release+0x8>)
 8002b62:	f000 b8ae 	b.w	8002cc2 <__retarget_lock_release_recursive>
 8002b66:	bf00      	nop
 8002b68:	20000109 	.word	0x20000109

08002b6c <__sinit_lock_acquire>:
 8002b6c:	4801      	ldr	r0, [pc, #4]	; (8002b74 <__sinit_lock_acquire+0x8>)
 8002b6e:	f000 b8a7 	b.w	8002cc0 <__retarget_lock_acquire_recursive>
 8002b72:	bf00      	nop
 8002b74:	2000010a 	.word	0x2000010a

08002b78 <__sinit_lock_release>:
 8002b78:	4801      	ldr	r0, [pc, #4]	; (8002b80 <__sinit_lock_release+0x8>)
 8002b7a:	f000 b8a2 	b.w	8002cc2 <__retarget_lock_release_recursive>
 8002b7e:	bf00      	nop
 8002b80:	2000010a 	.word	0x2000010a

08002b84 <__sinit>:
 8002b84:	b510      	push	{r4, lr}
 8002b86:	4604      	mov	r4, r0
 8002b88:	f7ff fff0 	bl	8002b6c <__sinit_lock_acquire>
 8002b8c:	69a3      	ldr	r3, [r4, #24]
 8002b8e:	b11b      	cbz	r3, 8002b98 <__sinit+0x14>
 8002b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b94:	f7ff bff0 	b.w	8002b78 <__sinit_lock_release>
 8002b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <__sinit+0x68>)
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <__sinit+0x6c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	bf04      	itt	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	61a3      	streq	r3, [r4, #24]
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f000 f820 	bl	8002bf4 <__sfp>
 8002bb4:	6060      	str	r0, [r4, #4]
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f000 f81c 	bl	8002bf4 <__sfp>
 8002bbc:	60a0      	str	r0, [r4, #8]
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f000 f818 	bl	8002bf4 <__sfp>
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60e0      	str	r0, [r4, #12]
 8002bc8:	2104      	movs	r1, #4
 8002bca:	6860      	ldr	r0, [r4, #4]
 8002bcc:	f7ff ff82 	bl	8002ad4 <std>
 8002bd0:	68a0      	ldr	r0, [r4, #8]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2109      	movs	r1, #9
 8002bd6:	f7ff ff7d 	bl	8002ad4 <std>
 8002bda:	68e0      	ldr	r0, [r4, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	2112      	movs	r1, #18
 8002be0:	f7ff ff78 	bl	8002ad4 <std>
 8002be4:	2301      	movs	r3, #1
 8002be6:	61a3      	str	r3, [r4, #24]
 8002be8:	e7d2      	b.n	8002b90 <__sinit+0xc>
 8002bea:	bf00      	nop
 8002bec:	08003a18 	.word	0x08003a18
 8002bf0:	08002b1d 	.word	0x08002b1d

08002bf4 <__sfp>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	4607      	mov	r7, r0
 8002bf8:	f7ff ffac 	bl	8002b54 <__sfp_lock_acquire>
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <__sfp+0x84>)
 8002bfe:	681e      	ldr	r6, [r3, #0]
 8002c00:	69b3      	ldr	r3, [r6, #24]
 8002c02:	b913      	cbnz	r3, 8002c0a <__sfp+0x16>
 8002c04:	4630      	mov	r0, r6
 8002c06:	f7ff ffbd 	bl	8002b84 <__sinit>
 8002c0a:	3648      	adds	r6, #72	; 0x48
 8002c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	d503      	bpl.n	8002c1c <__sfp+0x28>
 8002c14:	6833      	ldr	r3, [r6, #0]
 8002c16:	b30b      	cbz	r3, 8002c5c <__sfp+0x68>
 8002c18:	6836      	ldr	r6, [r6, #0]
 8002c1a:	e7f7      	b.n	8002c0c <__sfp+0x18>
 8002c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c20:	b9d5      	cbnz	r5, 8002c58 <__sfp+0x64>
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <__sfp+0x88>)
 8002c24:	60e3      	str	r3, [r4, #12]
 8002c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8002c2c:	f000 f847 	bl	8002cbe <__retarget_lock_init_recursive>
 8002c30:	f7ff ff96 	bl	8002b60 <__sfp_lock_release>
 8002c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c3c:	6025      	str	r5, [r4, #0]
 8002c3e:	61a5      	str	r5, [r4, #24]
 8002c40:	2208      	movs	r2, #8
 8002c42:	4629      	mov	r1, r5
 8002c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c48:	f7ff ff24 	bl	8002a94 <memset>
 8002c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c54:	4620      	mov	r0, r4
 8002c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c58:	3468      	adds	r4, #104	; 0x68
 8002c5a:	e7d9      	b.n	8002c10 <__sfp+0x1c>
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4638      	mov	r0, r7
 8002c60:	f7ff ff62 	bl	8002b28 <__sfmoreglue>
 8002c64:	4604      	mov	r4, r0
 8002c66:	6030      	str	r0, [r6, #0]
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d1d5      	bne.n	8002c18 <__sfp+0x24>
 8002c6c:	f7ff ff78 	bl	8002b60 <__sfp_lock_release>
 8002c70:	230c      	movs	r3, #12
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	e7ee      	b.n	8002c54 <__sfp+0x60>
 8002c76:	bf00      	nop
 8002c78:	08003a18 	.word	0x08003a18
 8002c7c:	ffff0001 	.word	0xffff0001

08002c80 <_fwalk_reent>:
 8002c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c84:	4606      	mov	r6, r0
 8002c86:	4688      	mov	r8, r1
 8002c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c8c:	2700      	movs	r7, #0
 8002c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c92:	f1b9 0901 	subs.w	r9, r9, #1
 8002c96:	d505      	bpl.n	8002ca4 <_fwalk_reent+0x24>
 8002c98:	6824      	ldr	r4, [r4, #0]
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d1f7      	bne.n	8002c8e <_fwalk_reent+0xe>
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ca4:	89ab      	ldrh	r3, [r5, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d907      	bls.n	8002cba <_fwalk_reent+0x3a>
 8002caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	d003      	beq.n	8002cba <_fwalk_reent+0x3a>
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	47c0      	blx	r8
 8002cb8:	4307      	orrs	r7, r0
 8002cba:	3568      	adds	r5, #104	; 0x68
 8002cbc:	e7e9      	b.n	8002c92 <_fwalk_reent+0x12>

08002cbe <__retarget_lock_init_recursive>:
 8002cbe:	4770      	bx	lr

08002cc0 <__retarget_lock_acquire_recursive>:
 8002cc0:	4770      	bx	lr

08002cc2 <__retarget_lock_release_recursive>:
 8002cc2:	4770      	bx	lr

08002cc4 <sbrk_aligned>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4e0e      	ldr	r6, [pc, #56]	; (8002d00 <sbrk_aligned+0x3c>)
 8002cc8:	460c      	mov	r4, r1
 8002cca:	6831      	ldr	r1, [r6, #0]
 8002ccc:	4605      	mov	r5, r0
 8002cce:	b911      	cbnz	r1, 8002cd6 <sbrk_aligned+0x12>
 8002cd0:	f000 fb7a 	bl	80033c8 <_sbrk_r>
 8002cd4:	6030      	str	r0, [r6, #0]
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 fb75 	bl	80033c8 <_sbrk_r>
 8002cde:	1c43      	adds	r3, r0, #1
 8002ce0:	d00a      	beq.n	8002cf8 <sbrk_aligned+0x34>
 8002ce2:	1cc4      	adds	r4, r0, #3
 8002ce4:	f024 0403 	bic.w	r4, r4, #3
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d007      	beq.n	8002cfc <sbrk_aligned+0x38>
 8002cec:	1a21      	subs	r1, r4, r0
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 fb6a 	bl	80033c8 <_sbrk_r>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d101      	bne.n	8002cfc <sbrk_aligned+0x38>
 8002cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	20000110 	.word	0x20000110

08002d04 <_malloc_r>:
 8002d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d08:	1ccd      	adds	r5, r1, #3
 8002d0a:	f025 0503 	bic.w	r5, r5, #3
 8002d0e:	3508      	adds	r5, #8
 8002d10:	2d0c      	cmp	r5, #12
 8002d12:	bf38      	it	cc
 8002d14:	250c      	movcc	r5, #12
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	4607      	mov	r7, r0
 8002d1a:	db01      	blt.n	8002d20 <_malloc_r+0x1c>
 8002d1c:	42a9      	cmp	r1, r5
 8002d1e:	d905      	bls.n	8002d2c <_malloc_r+0x28>
 8002d20:	230c      	movs	r3, #12
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	2600      	movs	r6, #0
 8002d26:	4630      	mov	r0, r6
 8002d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2c:	4e2e      	ldr	r6, [pc, #184]	; (8002de8 <_malloc_r+0xe4>)
 8002d2e:	f000 fdbb 	bl	80038a8 <__malloc_lock>
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	461c      	mov	r4, r3
 8002d36:	bb34      	cbnz	r4, 8002d86 <_malloc_r+0x82>
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	f7ff ffc2 	bl	8002cc4 <sbrk_aligned>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	4604      	mov	r4, r0
 8002d44:	d14d      	bne.n	8002de2 <_malloc_r+0xde>
 8002d46:	6834      	ldr	r4, [r6, #0]
 8002d48:	4626      	mov	r6, r4
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d140      	bne.n	8002dd0 <_malloc_r+0xcc>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	4631      	mov	r1, r6
 8002d52:	4638      	mov	r0, r7
 8002d54:	eb04 0803 	add.w	r8, r4, r3
 8002d58:	f000 fb36 	bl	80033c8 <_sbrk_r>
 8002d5c:	4580      	cmp	r8, r0
 8002d5e:	d13a      	bne.n	8002dd6 <_malloc_r+0xd2>
 8002d60:	6821      	ldr	r1, [r4, #0]
 8002d62:	3503      	adds	r5, #3
 8002d64:	1a6d      	subs	r5, r5, r1
 8002d66:	f025 0503 	bic.w	r5, r5, #3
 8002d6a:	3508      	adds	r5, #8
 8002d6c:	2d0c      	cmp	r5, #12
 8002d6e:	bf38      	it	cc
 8002d70:	250c      	movcc	r5, #12
 8002d72:	4629      	mov	r1, r5
 8002d74:	4638      	mov	r0, r7
 8002d76:	f7ff ffa5 	bl	8002cc4 <sbrk_aligned>
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d02b      	beq.n	8002dd6 <_malloc_r+0xd2>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	442b      	add	r3, r5
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	e00e      	b.n	8002da4 <_malloc_r+0xa0>
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	1b52      	subs	r2, r2, r5
 8002d8a:	d41e      	bmi.n	8002dca <_malloc_r+0xc6>
 8002d8c:	2a0b      	cmp	r2, #11
 8002d8e:	d916      	bls.n	8002dbe <_malloc_r+0xba>
 8002d90:	1961      	adds	r1, r4, r5
 8002d92:	42a3      	cmp	r3, r4
 8002d94:	6025      	str	r5, [r4, #0]
 8002d96:	bf18      	it	ne
 8002d98:	6059      	strne	r1, [r3, #4]
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	bf08      	it	eq
 8002d9e:	6031      	streq	r1, [r6, #0]
 8002da0:	5162      	str	r2, [r4, r5]
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	4638      	mov	r0, r7
 8002da6:	f104 060b 	add.w	r6, r4, #11
 8002daa:	f000 fd83 	bl	80038b4 <__malloc_unlock>
 8002dae:	f026 0607 	bic.w	r6, r6, #7
 8002db2:	1d23      	adds	r3, r4, #4
 8002db4:	1af2      	subs	r2, r6, r3
 8002db6:	d0b6      	beq.n	8002d26 <_malloc_r+0x22>
 8002db8:	1b9b      	subs	r3, r3, r6
 8002dba:	50a3      	str	r3, [r4, r2]
 8002dbc:	e7b3      	b.n	8002d26 <_malloc_r+0x22>
 8002dbe:	6862      	ldr	r2, [r4, #4]
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	bf0c      	ite	eq
 8002dc4:	6032      	streq	r2, [r6, #0]
 8002dc6:	605a      	strne	r2, [r3, #4]
 8002dc8:	e7ec      	b.n	8002da4 <_malloc_r+0xa0>
 8002dca:	4623      	mov	r3, r4
 8002dcc:	6864      	ldr	r4, [r4, #4]
 8002dce:	e7b2      	b.n	8002d36 <_malloc_r+0x32>
 8002dd0:	4634      	mov	r4, r6
 8002dd2:	6876      	ldr	r6, [r6, #4]
 8002dd4:	e7b9      	b.n	8002d4a <_malloc_r+0x46>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f000 fd6a 	bl	80038b4 <__malloc_unlock>
 8002de0:	e7a1      	b.n	8002d26 <_malloc_r+0x22>
 8002de2:	6025      	str	r5, [r4, #0]
 8002de4:	e7de      	b.n	8002da4 <_malloc_r+0xa0>
 8002de6:	bf00      	nop
 8002de8:	2000010c 	.word	0x2000010c

08002dec <__sfputc_r>:
 8002dec:	6893      	ldr	r3, [r2, #8]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	b410      	push	{r4}
 8002df4:	6093      	str	r3, [r2, #8]
 8002df6:	da08      	bge.n	8002e0a <__sfputc_r+0x1e>
 8002df8:	6994      	ldr	r4, [r2, #24]
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	db01      	blt.n	8002e02 <__sfputc_r+0x16>
 8002dfe:	290a      	cmp	r1, #10
 8002e00:	d103      	bne.n	8002e0a <__sfputc_r+0x1e>
 8002e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e06:	f000 bb33 	b.w	8003470 <__swbuf_r>
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	1c58      	adds	r0, r3, #1
 8002e0e:	6010      	str	r0, [r2, #0]
 8002e10:	7019      	strb	r1, [r3, #0]
 8002e12:	4608      	mov	r0, r1
 8002e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <__sfputs_r>:
 8002e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1c:	4606      	mov	r6, r0
 8002e1e:	460f      	mov	r7, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	18d5      	adds	r5, r2, r3
 8002e24:	42ac      	cmp	r4, r5
 8002e26:	d101      	bne.n	8002e2c <__sfputs_r+0x12>
 8002e28:	2000      	movs	r0, #0
 8002e2a:	e007      	b.n	8002e3c <__sfputs_r+0x22>
 8002e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e30:	463a      	mov	r2, r7
 8002e32:	4630      	mov	r0, r6
 8002e34:	f7ff ffda 	bl	8002dec <__sfputc_r>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d1f3      	bne.n	8002e24 <__sfputs_r+0xa>
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e40 <_vfiprintf_r>:
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	460d      	mov	r5, r1
 8002e46:	b09d      	sub	sp, #116	; 0x74
 8002e48:	4614      	mov	r4, r2
 8002e4a:	4698      	mov	r8, r3
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	b118      	cbz	r0, 8002e58 <_vfiprintf_r+0x18>
 8002e50:	6983      	ldr	r3, [r0, #24]
 8002e52:	b90b      	cbnz	r3, 8002e58 <_vfiprintf_r+0x18>
 8002e54:	f7ff fe96 	bl	8002b84 <__sinit>
 8002e58:	4b89      	ldr	r3, [pc, #548]	; (8003080 <_vfiprintf_r+0x240>)
 8002e5a:	429d      	cmp	r5, r3
 8002e5c:	d11b      	bne.n	8002e96 <_vfiprintf_r+0x56>
 8002e5e:	6875      	ldr	r5, [r6, #4]
 8002e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e62:	07d9      	lsls	r1, r3, #31
 8002e64:	d405      	bmi.n	8002e72 <_vfiprintf_r+0x32>
 8002e66:	89ab      	ldrh	r3, [r5, #12]
 8002e68:	059a      	lsls	r2, r3, #22
 8002e6a:	d402      	bmi.n	8002e72 <_vfiprintf_r+0x32>
 8002e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e6e:	f7ff ff27 	bl	8002cc0 <__retarget_lock_acquire_recursive>
 8002e72:	89ab      	ldrh	r3, [r5, #12]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	d501      	bpl.n	8002e7c <_vfiprintf_r+0x3c>
 8002e78:	692b      	ldr	r3, [r5, #16]
 8002e7a:	b9eb      	cbnz	r3, 8002eb8 <_vfiprintf_r+0x78>
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f000 fb5a 	bl	8003538 <__swsetup_r>
 8002e84:	b1c0      	cbz	r0, 8002eb8 <_vfiprintf_r+0x78>
 8002e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e88:	07dc      	lsls	r4, r3, #31
 8002e8a:	d50e      	bpl.n	8002eaa <_vfiprintf_r+0x6a>
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	b01d      	add	sp, #116	; 0x74
 8002e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e96:	4b7b      	ldr	r3, [pc, #492]	; (8003084 <_vfiprintf_r+0x244>)
 8002e98:	429d      	cmp	r5, r3
 8002e9a:	d101      	bne.n	8002ea0 <_vfiprintf_r+0x60>
 8002e9c:	68b5      	ldr	r5, [r6, #8]
 8002e9e:	e7df      	b.n	8002e60 <_vfiprintf_r+0x20>
 8002ea0:	4b79      	ldr	r3, [pc, #484]	; (8003088 <_vfiprintf_r+0x248>)
 8002ea2:	429d      	cmp	r5, r3
 8002ea4:	bf08      	it	eq
 8002ea6:	68f5      	ldreq	r5, [r6, #12]
 8002ea8:	e7da      	b.n	8002e60 <_vfiprintf_r+0x20>
 8002eaa:	89ab      	ldrh	r3, [r5, #12]
 8002eac:	0598      	lsls	r0, r3, #22
 8002eae:	d4ed      	bmi.n	8002e8c <_vfiprintf_r+0x4c>
 8002eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eb2:	f7ff ff06 	bl	8002cc2 <__retarget_lock_release_recursive>
 8002eb6:	e7e9      	b.n	8002e8c <_vfiprintf_r+0x4c>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9309      	str	r3, [sp, #36]	; 0x24
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec6:	2330      	movs	r3, #48	; 0x30
 8002ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800308c <_vfiprintf_r+0x24c>
 8002ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ed0:	f04f 0901 	mov.w	r9, #1
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	469a      	mov	sl, r3
 8002ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002edc:	b10a      	cbz	r2, 8002ee2 <_vfiprintf_r+0xa2>
 8002ede:	2a25      	cmp	r2, #37	; 0x25
 8002ee0:	d1f9      	bne.n	8002ed6 <_vfiprintf_r+0x96>
 8002ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee6:	d00b      	beq.n	8002f00 <_vfiprintf_r+0xc0>
 8002ee8:	465b      	mov	r3, fp
 8002eea:	4622      	mov	r2, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7ff ff93 	bl	8002e1a <__sfputs_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	f000 80aa 	beq.w	800304e <_vfiprintf_r+0x20e>
 8002efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002efc:	445a      	add	r2, fp
 8002efe:	9209      	str	r2, [sp, #36]	; 0x24
 8002f00:	f89a 3000 	ldrb.w	r3, [sl]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a2 	beq.w	800304e <_vfiprintf_r+0x20e>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f14:	f10a 0a01 	add.w	sl, sl, #1
 8002f18:	9304      	str	r3, [sp, #16]
 8002f1a:	9307      	str	r3, [sp, #28]
 8002f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f20:	931a      	str	r3, [sp, #104]	; 0x68
 8002f22:	4654      	mov	r4, sl
 8002f24:	2205      	movs	r2, #5
 8002f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f2a:	4858      	ldr	r0, [pc, #352]	; (800308c <_vfiprintf_r+0x24c>)
 8002f2c:	f7fd f950 	bl	80001d0 <memchr>
 8002f30:	9a04      	ldr	r2, [sp, #16]
 8002f32:	b9d8      	cbnz	r0, 8002f6c <_vfiprintf_r+0x12c>
 8002f34:	06d1      	lsls	r1, r2, #27
 8002f36:	bf44      	itt	mi
 8002f38:	2320      	movmi	r3, #32
 8002f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f3e:	0713      	lsls	r3, r2, #28
 8002f40:	bf44      	itt	mi
 8002f42:	232b      	movmi	r3, #43	; 0x2b
 8002f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f48:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f4e:	d015      	beq.n	8002f7c <_vfiprintf_r+0x13c>
 8002f50:	9a07      	ldr	r2, [sp, #28]
 8002f52:	4654      	mov	r4, sl
 8002f54:	2000      	movs	r0, #0
 8002f56:	f04f 0c0a 	mov.w	ip, #10
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f60:	3b30      	subs	r3, #48	; 0x30
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	d94e      	bls.n	8003004 <_vfiprintf_r+0x1c4>
 8002f66:	b1b0      	cbz	r0, 8002f96 <_vfiprintf_r+0x156>
 8002f68:	9207      	str	r2, [sp, #28]
 8002f6a:	e014      	b.n	8002f96 <_vfiprintf_r+0x156>
 8002f6c:	eba0 0308 	sub.w	r3, r0, r8
 8002f70:	fa09 f303 	lsl.w	r3, r9, r3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	9304      	str	r3, [sp, #16]
 8002f78:	46a2      	mov	sl, r4
 8002f7a:	e7d2      	b.n	8002f22 <_vfiprintf_r+0xe2>
 8002f7c:	9b03      	ldr	r3, [sp, #12]
 8002f7e:	1d19      	adds	r1, r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	9103      	str	r1, [sp, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bfbb      	ittet	lt
 8002f88:	425b      	neglt	r3, r3
 8002f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8002f8e:	9307      	strge	r3, [sp, #28]
 8002f90:	9307      	strlt	r3, [sp, #28]
 8002f92:	bfb8      	it	lt
 8002f94:	9204      	strlt	r2, [sp, #16]
 8002f96:	7823      	ldrb	r3, [r4, #0]
 8002f98:	2b2e      	cmp	r3, #46	; 0x2e
 8002f9a:	d10c      	bne.n	8002fb6 <_vfiprintf_r+0x176>
 8002f9c:	7863      	ldrb	r3, [r4, #1]
 8002f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa0:	d135      	bne.n	800300e <_vfiprintf_r+0x1ce>
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	1d1a      	adds	r2, r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	9203      	str	r2, [sp, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfb8      	it	lt
 8002fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fb2:	3402      	adds	r4, #2
 8002fb4:	9305      	str	r3, [sp, #20]
 8002fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800309c <_vfiprintf_r+0x25c>
 8002fba:	7821      	ldrb	r1, [r4, #0]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	4650      	mov	r0, sl
 8002fc0:	f7fd f906 	bl	80001d0 <memchr>
 8002fc4:	b140      	cbz	r0, 8002fd8 <_vfiprintf_r+0x198>
 8002fc6:	2340      	movs	r3, #64	; 0x40
 8002fc8:	eba0 000a 	sub.w	r0, r0, sl
 8002fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8002fd0:	9b04      	ldr	r3, [sp, #16]
 8002fd2:	4303      	orrs	r3, r0
 8002fd4:	3401      	adds	r4, #1
 8002fd6:	9304      	str	r3, [sp, #16]
 8002fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fdc:	482c      	ldr	r0, [pc, #176]	; (8003090 <_vfiprintf_r+0x250>)
 8002fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	f7fd f8f4 	bl	80001d0 <memchr>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d03f      	beq.n	800306c <_vfiprintf_r+0x22c>
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <_vfiprintf_r+0x254>)
 8002fee:	bb1b      	cbnz	r3, 8003038 <_vfiprintf_r+0x1f8>
 8002ff0:	9b03      	ldr	r3, [sp, #12]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	f023 0307 	bic.w	r3, r3, #7
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ffe:	443b      	add	r3, r7
 8003000:	9309      	str	r3, [sp, #36]	; 0x24
 8003002:	e767      	b.n	8002ed4 <_vfiprintf_r+0x94>
 8003004:	fb0c 3202 	mla	r2, ip, r2, r3
 8003008:	460c      	mov	r4, r1
 800300a:	2001      	movs	r0, #1
 800300c:	e7a5      	b.n	8002f5a <_vfiprintf_r+0x11a>
 800300e:	2300      	movs	r3, #0
 8003010:	3401      	adds	r4, #1
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 0c0a 	mov.w	ip, #10
 800301a:	4620      	mov	r0, r4
 800301c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003020:	3a30      	subs	r2, #48	; 0x30
 8003022:	2a09      	cmp	r2, #9
 8003024:	d903      	bls.n	800302e <_vfiprintf_r+0x1ee>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0c5      	beq.n	8002fb6 <_vfiprintf_r+0x176>
 800302a:	9105      	str	r1, [sp, #20]
 800302c:	e7c3      	b.n	8002fb6 <_vfiprintf_r+0x176>
 800302e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003032:	4604      	mov	r4, r0
 8003034:	2301      	movs	r3, #1
 8003036:	e7f0      	b.n	800301a <_vfiprintf_r+0x1da>
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	462a      	mov	r2, r5
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <_vfiprintf_r+0x258>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	4630      	mov	r0, r6
 8003044:	f3af 8000 	nop.w
 8003048:	4607      	mov	r7, r0
 800304a:	1c78      	adds	r0, r7, #1
 800304c:	d1d6      	bne.n	8002ffc <_vfiprintf_r+0x1bc>
 800304e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003050:	07d9      	lsls	r1, r3, #31
 8003052:	d405      	bmi.n	8003060 <_vfiprintf_r+0x220>
 8003054:	89ab      	ldrh	r3, [r5, #12]
 8003056:	059a      	lsls	r2, r3, #22
 8003058:	d402      	bmi.n	8003060 <_vfiprintf_r+0x220>
 800305a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800305c:	f7ff fe31 	bl	8002cc2 <__retarget_lock_release_recursive>
 8003060:	89ab      	ldrh	r3, [r5, #12]
 8003062:	065b      	lsls	r3, r3, #25
 8003064:	f53f af12 	bmi.w	8002e8c <_vfiprintf_r+0x4c>
 8003068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800306a:	e711      	b.n	8002e90 <_vfiprintf_r+0x50>
 800306c:	ab03      	add	r3, sp, #12
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	462a      	mov	r2, r5
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <_vfiprintf_r+0x258>)
 8003074:	a904      	add	r1, sp, #16
 8003076:	4630      	mov	r0, r6
 8003078:	f000 f880 	bl	800317c <_printf_i>
 800307c:	e7e4      	b.n	8003048 <_vfiprintf_r+0x208>
 800307e:	bf00      	nop
 8003080:	08003a3c 	.word	0x08003a3c
 8003084:	08003a5c 	.word	0x08003a5c
 8003088:	08003a1c 	.word	0x08003a1c
 800308c:	08003a7c 	.word	0x08003a7c
 8003090:	08003a86 	.word	0x08003a86
 8003094:	00000000 	.word	0x00000000
 8003098:	08002e1b 	.word	0x08002e1b
 800309c:	08003a82 	.word	0x08003a82

080030a0 <_printf_common>:
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a4:	4616      	mov	r6, r2
 80030a6:	4699      	mov	r9, r3
 80030a8:	688a      	ldr	r2, [r1, #8]
 80030aa:	690b      	ldr	r3, [r1, #16]
 80030ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	bfb8      	it	lt
 80030b4:	4613      	movlt	r3, r2
 80030b6:	6033      	str	r3, [r6, #0]
 80030b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030bc:	4607      	mov	r7, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	b10a      	cbz	r2, 80030c6 <_printf_common+0x26>
 80030c2:	3301      	adds	r3, #1
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	0699      	lsls	r1, r3, #26
 80030ca:	bf42      	ittt	mi
 80030cc:	6833      	ldrmi	r3, [r6, #0]
 80030ce:	3302      	addmi	r3, #2
 80030d0:	6033      	strmi	r3, [r6, #0]
 80030d2:	6825      	ldr	r5, [r4, #0]
 80030d4:	f015 0506 	ands.w	r5, r5, #6
 80030d8:	d106      	bne.n	80030e8 <_printf_common+0x48>
 80030da:	f104 0a19 	add.w	sl, r4, #25
 80030de:	68e3      	ldr	r3, [r4, #12]
 80030e0:	6832      	ldr	r2, [r6, #0]
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	42ab      	cmp	r3, r5
 80030e6:	dc26      	bgt.n	8003136 <_printf_common+0x96>
 80030e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030ec:	1e13      	subs	r3, r2, #0
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	bf18      	it	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	0692      	lsls	r2, r2, #26
 80030f6:	d42b      	bmi.n	8003150 <_printf_common+0xb0>
 80030f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030fc:	4649      	mov	r1, r9
 80030fe:	4638      	mov	r0, r7
 8003100:	47c0      	blx	r8
 8003102:	3001      	adds	r0, #1
 8003104:	d01e      	beq.n	8003144 <_printf_common+0xa4>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	68e5      	ldr	r5, [r4, #12]
 800310a:	6832      	ldr	r2, [r6, #0]
 800310c:	f003 0306 	and.w	r3, r3, #6
 8003110:	2b04      	cmp	r3, #4
 8003112:	bf08      	it	eq
 8003114:	1aad      	subeq	r5, r5, r2
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	6922      	ldr	r2, [r4, #16]
 800311a:	bf0c      	ite	eq
 800311c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003120:	2500      	movne	r5, #0
 8003122:	4293      	cmp	r3, r2
 8003124:	bfc4      	itt	gt
 8003126:	1a9b      	subgt	r3, r3, r2
 8003128:	18ed      	addgt	r5, r5, r3
 800312a:	2600      	movs	r6, #0
 800312c:	341a      	adds	r4, #26
 800312e:	42b5      	cmp	r5, r6
 8003130:	d11a      	bne.n	8003168 <_printf_common+0xc8>
 8003132:	2000      	movs	r0, #0
 8003134:	e008      	b.n	8003148 <_printf_common+0xa8>
 8003136:	2301      	movs	r3, #1
 8003138:	4652      	mov	r2, sl
 800313a:	4649      	mov	r1, r9
 800313c:	4638      	mov	r0, r7
 800313e:	47c0      	blx	r8
 8003140:	3001      	adds	r0, #1
 8003142:	d103      	bne.n	800314c <_printf_common+0xac>
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314c:	3501      	adds	r5, #1
 800314e:	e7c6      	b.n	80030de <_printf_common+0x3e>
 8003150:	18e1      	adds	r1, r4, r3
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	2030      	movs	r0, #48	; 0x30
 8003156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800315a:	4422      	add	r2, r4
 800315c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003164:	3302      	adds	r3, #2
 8003166:	e7c7      	b.n	80030f8 <_printf_common+0x58>
 8003168:	2301      	movs	r3, #1
 800316a:	4622      	mov	r2, r4
 800316c:	4649      	mov	r1, r9
 800316e:	4638      	mov	r0, r7
 8003170:	47c0      	blx	r8
 8003172:	3001      	adds	r0, #1
 8003174:	d0e6      	beq.n	8003144 <_printf_common+0xa4>
 8003176:	3601      	adds	r6, #1
 8003178:	e7d9      	b.n	800312e <_printf_common+0x8e>
	...

0800317c <_printf_i>:
 800317c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	7e0f      	ldrb	r7, [r1, #24]
 8003182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003184:	2f78      	cmp	r7, #120	; 0x78
 8003186:	4691      	mov	r9, r2
 8003188:	4680      	mov	r8, r0
 800318a:	460c      	mov	r4, r1
 800318c:	469a      	mov	sl, r3
 800318e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003192:	d807      	bhi.n	80031a4 <_printf_i+0x28>
 8003194:	2f62      	cmp	r7, #98	; 0x62
 8003196:	d80a      	bhi.n	80031ae <_printf_i+0x32>
 8003198:	2f00      	cmp	r7, #0
 800319a:	f000 80d8 	beq.w	800334e <_printf_i+0x1d2>
 800319e:	2f58      	cmp	r7, #88	; 0x58
 80031a0:	f000 80a3 	beq.w	80032ea <_printf_i+0x16e>
 80031a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031ac:	e03a      	b.n	8003224 <_printf_i+0xa8>
 80031ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031b2:	2b15      	cmp	r3, #21
 80031b4:	d8f6      	bhi.n	80031a4 <_printf_i+0x28>
 80031b6:	a101      	add	r1, pc, #4	; (adr r1, 80031bc <_printf_i+0x40>)
 80031b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031bc:	08003215 	.word	0x08003215
 80031c0:	08003229 	.word	0x08003229
 80031c4:	080031a5 	.word	0x080031a5
 80031c8:	080031a5 	.word	0x080031a5
 80031cc:	080031a5 	.word	0x080031a5
 80031d0:	080031a5 	.word	0x080031a5
 80031d4:	08003229 	.word	0x08003229
 80031d8:	080031a5 	.word	0x080031a5
 80031dc:	080031a5 	.word	0x080031a5
 80031e0:	080031a5 	.word	0x080031a5
 80031e4:	080031a5 	.word	0x080031a5
 80031e8:	08003335 	.word	0x08003335
 80031ec:	08003259 	.word	0x08003259
 80031f0:	08003317 	.word	0x08003317
 80031f4:	080031a5 	.word	0x080031a5
 80031f8:	080031a5 	.word	0x080031a5
 80031fc:	08003357 	.word	0x08003357
 8003200:	080031a5 	.word	0x080031a5
 8003204:	08003259 	.word	0x08003259
 8003208:	080031a5 	.word	0x080031a5
 800320c:	080031a5 	.word	0x080031a5
 8003210:	0800331f 	.word	0x0800331f
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	1d1a      	adds	r2, r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	602a      	str	r2, [r5, #0]
 800321c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003224:	2301      	movs	r3, #1
 8003226:	e0a3      	b.n	8003370 <_printf_i+0x1f4>
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	6829      	ldr	r1, [r5, #0]
 800322c:	0606      	lsls	r6, r0, #24
 800322e:	f101 0304 	add.w	r3, r1, #4
 8003232:	d50a      	bpl.n	800324a <_printf_i+0xce>
 8003234:	680e      	ldr	r6, [r1, #0]
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	2e00      	cmp	r6, #0
 800323a:	da03      	bge.n	8003244 <_printf_i+0xc8>
 800323c:	232d      	movs	r3, #45	; 0x2d
 800323e:	4276      	negs	r6, r6
 8003240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003244:	485e      	ldr	r0, [pc, #376]	; (80033c0 <_printf_i+0x244>)
 8003246:	230a      	movs	r3, #10
 8003248:	e019      	b.n	800327e <_printf_i+0x102>
 800324a:	680e      	ldr	r6, [r1, #0]
 800324c:	602b      	str	r3, [r5, #0]
 800324e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003252:	bf18      	it	ne
 8003254:	b236      	sxthne	r6, r6
 8003256:	e7ef      	b.n	8003238 <_printf_i+0xbc>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	1d19      	adds	r1, r3, #4
 800325e:	6029      	str	r1, [r5, #0]
 8003260:	0601      	lsls	r1, r0, #24
 8003262:	d501      	bpl.n	8003268 <_printf_i+0xec>
 8003264:	681e      	ldr	r6, [r3, #0]
 8003266:	e002      	b.n	800326e <_printf_i+0xf2>
 8003268:	0646      	lsls	r6, r0, #25
 800326a:	d5fb      	bpl.n	8003264 <_printf_i+0xe8>
 800326c:	881e      	ldrh	r6, [r3, #0]
 800326e:	4854      	ldr	r0, [pc, #336]	; (80033c0 <_printf_i+0x244>)
 8003270:	2f6f      	cmp	r7, #111	; 0x6f
 8003272:	bf0c      	ite	eq
 8003274:	2308      	moveq	r3, #8
 8003276:	230a      	movne	r3, #10
 8003278:	2100      	movs	r1, #0
 800327a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800327e:	6865      	ldr	r5, [r4, #4]
 8003280:	60a5      	str	r5, [r4, #8]
 8003282:	2d00      	cmp	r5, #0
 8003284:	bfa2      	ittt	ge
 8003286:	6821      	ldrge	r1, [r4, #0]
 8003288:	f021 0104 	bicge.w	r1, r1, #4
 800328c:	6021      	strge	r1, [r4, #0]
 800328e:	b90e      	cbnz	r6, 8003294 <_printf_i+0x118>
 8003290:	2d00      	cmp	r5, #0
 8003292:	d04d      	beq.n	8003330 <_printf_i+0x1b4>
 8003294:	4615      	mov	r5, r2
 8003296:	fbb6 f1f3 	udiv	r1, r6, r3
 800329a:	fb03 6711 	mls	r7, r3, r1, r6
 800329e:	5dc7      	ldrb	r7, [r0, r7]
 80032a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032a4:	4637      	mov	r7, r6
 80032a6:	42bb      	cmp	r3, r7
 80032a8:	460e      	mov	r6, r1
 80032aa:	d9f4      	bls.n	8003296 <_printf_i+0x11a>
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d10b      	bne.n	80032c8 <_printf_i+0x14c>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	07de      	lsls	r6, r3, #31
 80032b4:	d508      	bpl.n	80032c8 <_printf_i+0x14c>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	6861      	ldr	r1, [r4, #4]
 80032ba:	4299      	cmp	r1, r3
 80032bc:	bfde      	ittt	le
 80032be:	2330      	movle	r3, #48	; 0x30
 80032c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032c8:	1b52      	subs	r2, r2, r5
 80032ca:	6122      	str	r2, [r4, #16]
 80032cc:	f8cd a000 	str.w	sl, [sp]
 80032d0:	464b      	mov	r3, r9
 80032d2:	aa03      	add	r2, sp, #12
 80032d4:	4621      	mov	r1, r4
 80032d6:	4640      	mov	r0, r8
 80032d8:	f7ff fee2 	bl	80030a0 <_printf_common>
 80032dc:	3001      	adds	r0, #1
 80032de:	d14c      	bne.n	800337a <_printf_i+0x1fe>
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	b004      	add	sp, #16
 80032e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ea:	4835      	ldr	r0, [pc, #212]	; (80033c0 <_printf_i+0x244>)
 80032ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032f0:	6829      	ldr	r1, [r5, #0]
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80032f8:	6029      	str	r1, [r5, #0]
 80032fa:	061d      	lsls	r5, r3, #24
 80032fc:	d514      	bpl.n	8003328 <_printf_i+0x1ac>
 80032fe:	07df      	lsls	r7, r3, #31
 8003300:	bf44      	itt	mi
 8003302:	f043 0320 	orrmi.w	r3, r3, #32
 8003306:	6023      	strmi	r3, [r4, #0]
 8003308:	b91e      	cbnz	r6, 8003312 <_printf_i+0x196>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	f023 0320 	bic.w	r3, r3, #32
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	2310      	movs	r3, #16
 8003314:	e7b0      	b.n	8003278 <_printf_i+0xfc>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	f043 0320 	orr.w	r3, r3, #32
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	2378      	movs	r3, #120	; 0x78
 8003320:	4828      	ldr	r0, [pc, #160]	; (80033c4 <_printf_i+0x248>)
 8003322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003326:	e7e3      	b.n	80032f0 <_printf_i+0x174>
 8003328:	0659      	lsls	r1, r3, #25
 800332a:	bf48      	it	mi
 800332c:	b2b6      	uxthmi	r6, r6
 800332e:	e7e6      	b.n	80032fe <_printf_i+0x182>
 8003330:	4615      	mov	r5, r2
 8003332:	e7bb      	b.n	80032ac <_printf_i+0x130>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	6826      	ldr	r6, [r4, #0]
 8003338:	6961      	ldr	r1, [r4, #20]
 800333a:	1d18      	adds	r0, r3, #4
 800333c:	6028      	str	r0, [r5, #0]
 800333e:	0635      	lsls	r5, r6, #24
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	d501      	bpl.n	8003348 <_printf_i+0x1cc>
 8003344:	6019      	str	r1, [r3, #0]
 8003346:	e002      	b.n	800334e <_printf_i+0x1d2>
 8003348:	0670      	lsls	r0, r6, #25
 800334a:	d5fb      	bpl.n	8003344 <_printf_i+0x1c8>
 800334c:	8019      	strh	r1, [r3, #0]
 800334e:	2300      	movs	r3, #0
 8003350:	6123      	str	r3, [r4, #16]
 8003352:	4615      	mov	r5, r2
 8003354:	e7ba      	b.n	80032cc <_printf_i+0x150>
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	1d1a      	adds	r2, r3, #4
 800335a:	602a      	str	r2, [r5, #0]
 800335c:	681d      	ldr	r5, [r3, #0]
 800335e:	6862      	ldr	r2, [r4, #4]
 8003360:	2100      	movs	r1, #0
 8003362:	4628      	mov	r0, r5
 8003364:	f7fc ff34 	bl	80001d0 <memchr>
 8003368:	b108      	cbz	r0, 800336e <_printf_i+0x1f2>
 800336a:	1b40      	subs	r0, r0, r5
 800336c:	6060      	str	r0, [r4, #4]
 800336e:	6863      	ldr	r3, [r4, #4]
 8003370:	6123      	str	r3, [r4, #16]
 8003372:	2300      	movs	r3, #0
 8003374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003378:	e7a8      	b.n	80032cc <_printf_i+0x150>
 800337a:	6923      	ldr	r3, [r4, #16]
 800337c:	462a      	mov	r2, r5
 800337e:	4649      	mov	r1, r9
 8003380:	4640      	mov	r0, r8
 8003382:	47d0      	blx	sl
 8003384:	3001      	adds	r0, #1
 8003386:	d0ab      	beq.n	80032e0 <_printf_i+0x164>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	079b      	lsls	r3, r3, #30
 800338c:	d413      	bmi.n	80033b6 <_printf_i+0x23a>
 800338e:	68e0      	ldr	r0, [r4, #12]
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	4298      	cmp	r0, r3
 8003394:	bfb8      	it	lt
 8003396:	4618      	movlt	r0, r3
 8003398:	e7a4      	b.n	80032e4 <_printf_i+0x168>
 800339a:	2301      	movs	r3, #1
 800339c:	4632      	mov	r2, r6
 800339e:	4649      	mov	r1, r9
 80033a0:	4640      	mov	r0, r8
 80033a2:	47d0      	blx	sl
 80033a4:	3001      	adds	r0, #1
 80033a6:	d09b      	beq.n	80032e0 <_printf_i+0x164>
 80033a8:	3501      	adds	r5, #1
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	9903      	ldr	r1, [sp, #12]
 80033ae:	1a5b      	subs	r3, r3, r1
 80033b0:	42ab      	cmp	r3, r5
 80033b2:	dcf2      	bgt.n	800339a <_printf_i+0x21e>
 80033b4:	e7eb      	b.n	800338e <_printf_i+0x212>
 80033b6:	2500      	movs	r5, #0
 80033b8:	f104 0619 	add.w	r6, r4, #25
 80033bc:	e7f5      	b.n	80033aa <_printf_i+0x22e>
 80033be:	bf00      	nop
 80033c0:	08003a8d 	.word	0x08003a8d
 80033c4:	08003a9e 	.word	0x08003a9e

080033c8 <_sbrk_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4d06      	ldr	r5, [pc, #24]	; (80033e4 <_sbrk_r+0x1c>)
 80033cc:	2300      	movs	r3, #0
 80033ce:	4604      	mov	r4, r0
 80033d0:	4608      	mov	r0, r1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	f7fd fd84 	bl	8000ee0 <_sbrk>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d102      	bne.n	80033e2 <_sbrk_r+0x1a>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	b103      	cbz	r3, 80033e2 <_sbrk_r+0x1a>
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	20000114 	.word	0x20000114

080033e8 <__sread>:
 80033e8:	b510      	push	{r4, lr}
 80033ea:	460c      	mov	r4, r1
 80033ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f0:	f000 fab2 	bl	8003958 <_read_r>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	bfab      	itete	ge
 80033f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033fa:	89a3      	ldrhlt	r3, [r4, #12]
 80033fc:	181b      	addge	r3, r3, r0
 80033fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003402:	bfac      	ite	ge
 8003404:	6563      	strge	r3, [r4, #84]	; 0x54
 8003406:	81a3      	strhlt	r3, [r4, #12]
 8003408:	bd10      	pop	{r4, pc}

0800340a <__swrite>:
 800340a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340e:	461f      	mov	r7, r3
 8003410:	898b      	ldrh	r3, [r1, #12]
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	4605      	mov	r5, r0
 8003416:	460c      	mov	r4, r1
 8003418:	4616      	mov	r6, r2
 800341a:	d505      	bpl.n	8003428 <__swrite+0x1e>
 800341c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003420:	2302      	movs	r3, #2
 8003422:	2200      	movs	r2, #0
 8003424:	f000 f9c8 	bl	80037b8 <_lseek_r>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800342e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	4632      	mov	r2, r6
 8003436:	463b      	mov	r3, r7
 8003438:	4628      	mov	r0, r5
 800343a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800343e:	f000 b869 	b.w	8003514 <_write_r>

08003442 <__sseek>:
 8003442:	b510      	push	{r4, lr}
 8003444:	460c      	mov	r4, r1
 8003446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344a:	f000 f9b5 	bl	80037b8 <_lseek_r>
 800344e:	1c43      	adds	r3, r0, #1
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	bf15      	itete	ne
 8003454:	6560      	strne	r0, [r4, #84]	; 0x54
 8003456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800345a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800345e:	81a3      	strheq	r3, [r4, #12]
 8003460:	bf18      	it	ne
 8003462:	81a3      	strhne	r3, [r4, #12]
 8003464:	bd10      	pop	{r4, pc}

08003466 <__sclose>:
 8003466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346a:	f000 b8d3 	b.w	8003614 <_close_r>
	...

08003470 <__swbuf_r>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	460e      	mov	r6, r1
 8003474:	4614      	mov	r4, r2
 8003476:	4605      	mov	r5, r0
 8003478:	b118      	cbz	r0, 8003482 <__swbuf_r+0x12>
 800347a:	6983      	ldr	r3, [r0, #24]
 800347c:	b90b      	cbnz	r3, 8003482 <__swbuf_r+0x12>
 800347e:	f7ff fb81 	bl	8002b84 <__sinit>
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <__swbuf_r+0x98>)
 8003484:	429c      	cmp	r4, r3
 8003486:	d12b      	bne.n	80034e0 <__swbuf_r+0x70>
 8003488:	686c      	ldr	r4, [r5, #4]
 800348a:	69a3      	ldr	r3, [r4, #24]
 800348c:	60a3      	str	r3, [r4, #8]
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	071a      	lsls	r2, r3, #28
 8003492:	d52f      	bpl.n	80034f4 <__swbuf_r+0x84>
 8003494:	6923      	ldr	r3, [r4, #16]
 8003496:	b36b      	cbz	r3, 80034f4 <__swbuf_r+0x84>
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	1ac0      	subs	r0, r0, r3
 800349e:	6963      	ldr	r3, [r4, #20]
 80034a0:	b2f6      	uxtb	r6, r6
 80034a2:	4283      	cmp	r3, r0
 80034a4:	4637      	mov	r7, r6
 80034a6:	dc04      	bgt.n	80034b2 <__swbuf_r+0x42>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4628      	mov	r0, r5
 80034ac:	f000 f948 	bl	8003740 <_fflush_r>
 80034b0:	bb30      	cbnz	r0, 8003500 <__swbuf_r+0x90>
 80034b2:	68a3      	ldr	r3, [r4, #8]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60a3      	str	r3, [r4, #8]
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	6022      	str	r2, [r4, #0]
 80034be:	701e      	strb	r6, [r3, #0]
 80034c0:	6963      	ldr	r3, [r4, #20]
 80034c2:	3001      	adds	r0, #1
 80034c4:	4283      	cmp	r3, r0
 80034c6:	d004      	beq.n	80034d2 <__swbuf_r+0x62>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	07db      	lsls	r3, r3, #31
 80034cc:	d506      	bpl.n	80034dc <__swbuf_r+0x6c>
 80034ce:	2e0a      	cmp	r6, #10
 80034d0:	d104      	bne.n	80034dc <__swbuf_r+0x6c>
 80034d2:	4621      	mov	r1, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	f000 f933 	bl	8003740 <_fflush_r>
 80034da:	b988      	cbnz	r0, 8003500 <__swbuf_r+0x90>
 80034dc:	4638      	mov	r0, r7
 80034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <__swbuf_r+0x9c>)
 80034e2:	429c      	cmp	r4, r3
 80034e4:	d101      	bne.n	80034ea <__swbuf_r+0x7a>
 80034e6:	68ac      	ldr	r4, [r5, #8]
 80034e8:	e7cf      	b.n	800348a <__swbuf_r+0x1a>
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <__swbuf_r+0xa0>)
 80034ec:	429c      	cmp	r4, r3
 80034ee:	bf08      	it	eq
 80034f0:	68ec      	ldreq	r4, [r5, #12]
 80034f2:	e7ca      	b.n	800348a <__swbuf_r+0x1a>
 80034f4:	4621      	mov	r1, r4
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 f81e 	bl	8003538 <__swsetup_r>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d0cb      	beq.n	8003498 <__swbuf_r+0x28>
 8003500:	f04f 37ff 	mov.w	r7, #4294967295
 8003504:	e7ea      	b.n	80034dc <__swbuf_r+0x6c>
 8003506:	bf00      	nop
 8003508:	08003a3c 	.word	0x08003a3c
 800350c:	08003a5c 	.word	0x08003a5c
 8003510:	08003a1c 	.word	0x08003a1c

08003514 <_write_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4d07      	ldr	r5, [pc, #28]	; (8003534 <_write_r+0x20>)
 8003518:	4604      	mov	r4, r0
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	2200      	movs	r2, #0
 8003520:	602a      	str	r2, [r5, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f7fd fc8b 	bl	8000e3e <_write>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_write_r+0x1e>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_write_r+0x1e>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000114 	.word	0x20000114

08003538 <__swsetup_r>:
 8003538:	4b32      	ldr	r3, [pc, #200]	; (8003604 <__swsetup_r+0xcc>)
 800353a:	b570      	push	{r4, r5, r6, lr}
 800353c:	681d      	ldr	r5, [r3, #0]
 800353e:	4606      	mov	r6, r0
 8003540:	460c      	mov	r4, r1
 8003542:	b125      	cbz	r5, 800354e <__swsetup_r+0x16>
 8003544:	69ab      	ldr	r3, [r5, #24]
 8003546:	b913      	cbnz	r3, 800354e <__swsetup_r+0x16>
 8003548:	4628      	mov	r0, r5
 800354a:	f7ff fb1b 	bl	8002b84 <__sinit>
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <__swsetup_r+0xd0>)
 8003550:	429c      	cmp	r4, r3
 8003552:	d10f      	bne.n	8003574 <__swsetup_r+0x3c>
 8003554:	686c      	ldr	r4, [r5, #4]
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800355c:	0719      	lsls	r1, r3, #28
 800355e:	d42c      	bmi.n	80035ba <__swsetup_r+0x82>
 8003560:	06dd      	lsls	r5, r3, #27
 8003562:	d411      	bmi.n	8003588 <__swsetup_r+0x50>
 8003564:	2309      	movs	r3, #9
 8003566:	6033      	str	r3, [r6, #0]
 8003568:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	f04f 30ff 	mov.w	r0, #4294967295
 8003572:	e03e      	b.n	80035f2 <__swsetup_r+0xba>
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <__swsetup_r+0xd4>)
 8003576:	429c      	cmp	r4, r3
 8003578:	d101      	bne.n	800357e <__swsetup_r+0x46>
 800357a:	68ac      	ldr	r4, [r5, #8]
 800357c:	e7eb      	b.n	8003556 <__swsetup_r+0x1e>
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <__swsetup_r+0xd8>)
 8003580:	429c      	cmp	r4, r3
 8003582:	bf08      	it	eq
 8003584:	68ec      	ldreq	r4, [r5, #12]
 8003586:	e7e6      	b.n	8003556 <__swsetup_r+0x1e>
 8003588:	0758      	lsls	r0, r3, #29
 800358a:	d512      	bpl.n	80035b2 <__swsetup_r+0x7a>
 800358c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800358e:	b141      	cbz	r1, 80035a2 <__swsetup_r+0x6a>
 8003590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003594:	4299      	cmp	r1, r3
 8003596:	d002      	beq.n	800359e <__swsetup_r+0x66>
 8003598:	4630      	mov	r0, r6
 800359a:	f000 f991 	bl	80038c0 <_free_r>
 800359e:	2300      	movs	r3, #0
 80035a0:	6363      	str	r3, [r4, #52]	; 0x34
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	2300      	movs	r3, #0
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	b94b      	cbnz	r3, 80035d2 <__swsetup_r+0x9a>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	d003      	beq.n	80035d2 <__swsetup_r+0x9a>
 80035ca:	4621      	mov	r1, r4
 80035cc:	4630      	mov	r0, r6
 80035ce:	f000 f92b 	bl	8003828 <__smakebuf_r>
 80035d2:	89a0      	ldrh	r0, [r4, #12]
 80035d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035d8:	f010 0301 	ands.w	r3, r0, #1
 80035dc:	d00a      	beq.n	80035f4 <__swsetup_r+0xbc>
 80035de:	2300      	movs	r3, #0
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	6963      	ldr	r3, [r4, #20]
 80035e4:	425b      	negs	r3, r3
 80035e6:	61a3      	str	r3, [r4, #24]
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	b943      	cbnz	r3, 80035fe <__swsetup_r+0xc6>
 80035ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035f0:	d1ba      	bne.n	8003568 <__swsetup_r+0x30>
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	0781      	lsls	r1, r0, #30
 80035f6:	bf58      	it	pl
 80035f8:	6963      	ldrpl	r3, [r4, #20]
 80035fa:	60a3      	str	r3, [r4, #8]
 80035fc:	e7f4      	b.n	80035e8 <__swsetup_r+0xb0>
 80035fe:	2000      	movs	r0, #0
 8003600:	e7f7      	b.n	80035f2 <__swsetup_r+0xba>
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c
 8003608:	08003a3c 	.word	0x08003a3c
 800360c:	08003a5c 	.word	0x08003a5c
 8003610:	08003a1c 	.word	0x08003a1c

08003614 <_close_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d06      	ldr	r5, [pc, #24]	; (8003630 <_close_r+0x1c>)
 8003618:	2300      	movs	r3, #0
 800361a:	4604      	mov	r4, r0
 800361c:	4608      	mov	r0, r1
 800361e:	602b      	str	r3, [r5, #0]
 8003620:	f7fd fc29 	bl	8000e76 <_close>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_close_r+0x1a>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_close_r+0x1a>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000114 	.word	0x20000114

08003634 <__sflush_r>:
 8003634:	898a      	ldrh	r2, [r1, #12]
 8003636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800363a:	4605      	mov	r5, r0
 800363c:	0710      	lsls	r0, r2, #28
 800363e:	460c      	mov	r4, r1
 8003640:	d458      	bmi.n	80036f4 <__sflush_r+0xc0>
 8003642:	684b      	ldr	r3, [r1, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	dc05      	bgt.n	8003654 <__sflush_r+0x20>
 8003648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	dc02      	bgt.n	8003654 <__sflush_r+0x20>
 800364e:	2000      	movs	r0, #0
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003656:	2e00      	cmp	r6, #0
 8003658:	d0f9      	beq.n	800364e <__sflush_r+0x1a>
 800365a:	2300      	movs	r3, #0
 800365c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003660:	682f      	ldr	r7, [r5, #0]
 8003662:	602b      	str	r3, [r5, #0]
 8003664:	d032      	beq.n	80036cc <__sflush_r+0x98>
 8003666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	075a      	lsls	r2, r3, #29
 800366c:	d505      	bpl.n	800367a <__sflush_r+0x46>
 800366e:	6863      	ldr	r3, [r4, #4]
 8003670:	1ac0      	subs	r0, r0, r3
 8003672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003674:	b10b      	cbz	r3, 800367a <__sflush_r+0x46>
 8003676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003678:	1ac0      	subs	r0, r0, r3
 800367a:	2300      	movs	r3, #0
 800367c:	4602      	mov	r2, r0
 800367e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003680:	6a21      	ldr	r1, [r4, #32]
 8003682:	4628      	mov	r0, r5
 8003684:	47b0      	blx	r6
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	d106      	bne.n	800369a <__sflush_r+0x66>
 800368c:	6829      	ldr	r1, [r5, #0]
 800368e:	291d      	cmp	r1, #29
 8003690:	d82c      	bhi.n	80036ec <__sflush_r+0xb8>
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <__sflush_r+0x108>)
 8003694:	40ca      	lsrs	r2, r1
 8003696:	07d6      	lsls	r6, r2, #31
 8003698:	d528      	bpl.n	80036ec <__sflush_r+0xb8>
 800369a:	2200      	movs	r2, #0
 800369c:	6062      	str	r2, [r4, #4]
 800369e:	04d9      	lsls	r1, r3, #19
 80036a0:	6922      	ldr	r2, [r4, #16]
 80036a2:	6022      	str	r2, [r4, #0]
 80036a4:	d504      	bpl.n	80036b0 <__sflush_r+0x7c>
 80036a6:	1c42      	adds	r2, r0, #1
 80036a8:	d101      	bne.n	80036ae <__sflush_r+0x7a>
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	b903      	cbnz	r3, 80036b0 <__sflush_r+0x7c>
 80036ae:	6560      	str	r0, [r4, #84]	; 0x54
 80036b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036b2:	602f      	str	r7, [r5, #0]
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d0ca      	beq.n	800364e <__sflush_r+0x1a>
 80036b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036bc:	4299      	cmp	r1, r3
 80036be:	d002      	beq.n	80036c6 <__sflush_r+0x92>
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f8fd 	bl	80038c0 <_free_r>
 80036c6:	2000      	movs	r0, #0
 80036c8:	6360      	str	r0, [r4, #52]	; 0x34
 80036ca:	e7c1      	b.n	8003650 <__sflush_r+0x1c>
 80036cc:	6a21      	ldr	r1, [r4, #32]
 80036ce:	2301      	movs	r3, #1
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b0      	blx	r6
 80036d4:	1c41      	adds	r1, r0, #1
 80036d6:	d1c7      	bne.n	8003668 <__sflush_r+0x34>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0c4      	beq.n	8003668 <__sflush_r+0x34>
 80036de:	2b1d      	cmp	r3, #29
 80036e0:	d001      	beq.n	80036e6 <__sflush_r+0xb2>
 80036e2:	2b16      	cmp	r3, #22
 80036e4:	d101      	bne.n	80036ea <__sflush_r+0xb6>
 80036e6:	602f      	str	r7, [r5, #0]
 80036e8:	e7b1      	b.n	800364e <__sflush_r+0x1a>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f0:	81a3      	strh	r3, [r4, #12]
 80036f2:	e7ad      	b.n	8003650 <__sflush_r+0x1c>
 80036f4:	690f      	ldr	r7, [r1, #16]
 80036f6:	2f00      	cmp	r7, #0
 80036f8:	d0a9      	beq.n	800364e <__sflush_r+0x1a>
 80036fa:	0793      	lsls	r3, r2, #30
 80036fc:	680e      	ldr	r6, [r1, #0]
 80036fe:	bf08      	it	eq
 8003700:	694b      	ldreq	r3, [r1, #20]
 8003702:	600f      	str	r7, [r1, #0]
 8003704:	bf18      	it	ne
 8003706:	2300      	movne	r3, #0
 8003708:	eba6 0807 	sub.w	r8, r6, r7
 800370c:	608b      	str	r3, [r1, #8]
 800370e:	f1b8 0f00 	cmp.w	r8, #0
 8003712:	dd9c      	ble.n	800364e <__sflush_r+0x1a>
 8003714:	6a21      	ldr	r1, [r4, #32]
 8003716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003718:	4643      	mov	r3, r8
 800371a:	463a      	mov	r2, r7
 800371c:	4628      	mov	r0, r5
 800371e:	47b0      	blx	r6
 8003720:	2800      	cmp	r0, #0
 8003722:	dc06      	bgt.n	8003732 <__sflush_r+0xfe>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800372a:	81a3      	strh	r3, [r4, #12]
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	e78e      	b.n	8003650 <__sflush_r+0x1c>
 8003732:	4407      	add	r7, r0
 8003734:	eba8 0800 	sub.w	r8, r8, r0
 8003738:	e7e9      	b.n	800370e <__sflush_r+0xda>
 800373a:	bf00      	nop
 800373c:	20400001 	.word	0x20400001

08003740 <_fflush_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	690b      	ldr	r3, [r1, #16]
 8003744:	4605      	mov	r5, r0
 8003746:	460c      	mov	r4, r1
 8003748:	b913      	cbnz	r3, 8003750 <_fflush_r+0x10>
 800374a:	2500      	movs	r5, #0
 800374c:	4628      	mov	r0, r5
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	b118      	cbz	r0, 800375a <_fflush_r+0x1a>
 8003752:	6983      	ldr	r3, [r0, #24]
 8003754:	b90b      	cbnz	r3, 800375a <_fflush_r+0x1a>
 8003756:	f7ff fa15 	bl	8002b84 <__sinit>
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <_fflush_r+0x6c>)
 800375c:	429c      	cmp	r4, r3
 800375e:	d11b      	bne.n	8003798 <_fflush_r+0x58>
 8003760:	686c      	ldr	r4, [r5, #4]
 8003762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ef      	beq.n	800374a <_fflush_r+0xa>
 800376a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800376c:	07d0      	lsls	r0, r2, #31
 800376e:	d404      	bmi.n	800377a <_fflush_r+0x3a>
 8003770:	0599      	lsls	r1, r3, #22
 8003772:	d402      	bmi.n	800377a <_fflush_r+0x3a>
 8003774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003776:	f7ff faa3 	bl	8002cc0 <__retarget_lock_acquire_recursive>
 800377a:	4628      	mov	r0, r5
 800377c:	4621      	mov	r1, r4
 800377e:	f7ff ff59 	bl	8003634 <__sflush_r>
 8003782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003784:	07da      	lsls	r2, r3, #31
 8003786:	4605      	mov	r5, r0
 8003788:	d4e0      	bmi.n	800374c <_fflush_r+0xc>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	059b      	lsls	r3, r3, #22
 800378e:	d4dd      	bmi.n	800374c <_fflush_r+0xc>
 8003790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003792:	f7ff fa96 	bl	8002cc2 <__retarget_lock_release_recursive>
 8003796:	e7d9      	b.n	800374c <_fflush_r+0xc>
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <_fflush_r+0x70>)
 800379a:	429c      	cmp	r4, r3
 800379c:	d101      	bne.n	80037a2 <_fflush_r+0x62>
 800379e:	68ac      	ldr	r4, [r5, #8]
 80037a0:	e7df      	b.n	8003762 <_fflush_r+0x22>
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <_fflush_r+0x74>)
 80037a4:	429c      	cmp	r4, r3
 80037a6:	bf08      	it	eq
 80037a8:	68ec      	ldreq	r4, [r5, #12]
 80037aa:	e7da      	b.n	8003762 <_fflush_r+0x22>
 80037ac:	08003a3c 	.word	0x08003a3c
 80037b0:	08003a5c 	.word	0x08003a5c
 80037b4:	08003a1c 	.word	0x08003a1c

080037b8 <_lseek_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	; (80037d8 <_lseek_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd fb7c 	bl	8000ec4 <_lseek>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_lseek_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_lseek_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20000114 	.word	0x20000114

080037dc <__swhatbuf_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	4614      	mov	r4, r2
 80037ea:	461d      	mov	r5, r3
 80037ec:	da08      	bge.n	8003800 <__swhatbuf_r+0x24>
 80037ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	061a      	lsls	r2, r3, #24
 80037f8:	d410      	bmi.n	800381c <__swhatbuf_r+0x40>
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	e00e      	b.n	800381e <__swhatbuf_r+0x42>
 8003800:	466a      	mov	r2, sp
 8003802:	f000 f8bb 	bl	800397c <_fstat_r>
 8003806:	2800      	cmp	r0, #0
 8003808:	dbf1      	blt.n	80037ee <__swhatbuf_r+0x12>
 800380a:	9a01      	ldr	r2, [sp, #4]
 800380c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003814:	425a      	negs	r2, r3
 8003816:	415a      	adcs	r2, r3
 8003818:	602a      	str	r2, [r5, #0]
 800381a:	e7ee      	b.n	80037fa <__swhatbuf_r+0x1e>
 800381c:	2340      	movs	r3, #64	; 0x40
 800381e:	2000      	movs	r0, #0
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	b016      	add	sp, #88	; 0x58
 8003824:	bd70      	pop	{r4, r5, r6, pc}
	...

08003828 <__smakebuf_r>:
 8003828:	898b      	ldrh	r3, [r1, #12]
 800382a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800382c:	079d      	lsls	r5, r3, #30
 800382e:	4606      	mov	r6, r0
 8003830:	460c      	mov	r4, r1
 8003832:	d507      	bpl.n	8003844 <__smakebuf_r+0x1c>
 8003834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2301      	movs	r3, #1
 800383e:	6163      	str	r3, [r4, #20]
 8003840:	b002      	add	sp, #8
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	ab01      	add	r3, sp, #4
 8003846:	466a      	mov	r2, sp
 8003848:	f7ff ffc8 	bl	80037dc <__swhatbuf_r>
 800384c:	9900      	ldr	r1, [sp, #0]
 800384e:	4605      	mov	r5, r0
 8003850:	4630      	mov	r0, r6
 8003852:	f7ff fa57 	bl	8002d04 <_malloc_r>
 8003856:	b948      	cbnz	r0, 800386c <__smakebuf_r+0x44>
 8003858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385c:	059a      	lsls	r2, r3, #22
 800385e:	d4ef      	bmi.n	8003840 <__smakebuf_r+0x18>
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	e7e3      	b.n	8003834 <__smakebuf_r+0xc>
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <__smakebuf_r+0x7c>)
 800386e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	6020      	str	r0, [r4, #0]
 8003874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	9b00      	ldr	r3, [sp, #0]
 800387c:	6163      	str	r3, [r4, #20]
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	6120      	str	r0, [r4, #16]
 8003882:	b15b      	cbz	r3, 800389c <__smakebuf_r+0x74>
 8003884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f889 	bl	80039a0 <_isatty_r>
 800388e:	b128      	cbz	r0, 800389c <__smakebuf_r+0x74>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	89a0      	ldrh	r0, [r4, #12]
 800389e:	4305      	orrs	r5, r0
 80038a0:	81a5      	strh	r5, [r4, #12]
 80038a2:	e7cd      	b.n	8003840 <__smakebuf_r+0x18>
 80038a4:	08002b1d 	.word	0x08002b1d

080038a8 <__malloc_lock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__malloc_lock+0x8>)
 80038aa:	f7ff ba09 	b.w	8002cc0 <__retarget_lock_acquire_recursive>
 80038ae:	bf00      	nop
 80038b0:	20000108 	.word	0x20000108

080038b4 <__malloc_unlock>:
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <__malloc_unlock+0x8>)
 80038b6:	f7ff ba04 	b.w	8002cc2 <__retarget_lock_release_recursive>
 80038ba:	bf00      	nop
 80038bc:	20000108 	.word	0x20000108

080038c0 <_free_r>:
 80038c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d044      	beq.n	8003950 <_free_r+0x90>
 80038c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ca:	9001      	str	r0, [sp, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f1a1 0404 	sub.w	r4, r1, #4
 80038d2:	bfb8      	it	lt
 80038d4:	18e4      	addlt	r4, r4, r3
 80038d6:	f7ff ffe7 	bl	80038a8 <__malloc_lock>
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <_free_r+0x94>)
 80038dc:	9801      	ldr	r0, [sp, #4]
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	b933      	cbnz	r3, 80038f0 <_free_r+0x30>
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6014      	str	r4, [r2, #0]
 80038e6:	b003      	add	sp, #12
 80038e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038ec:	f7ff bfe2 	b.w	80038b4 <__malloc_unlock>
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d908      	bls.n	8003906 <_free_r+0x46>
 80038f4:	6825      	ldr	r5, [r4, #0]
 80038f6:	1961      	adds	r1, r4, r5
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf01      	itttt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	1949      	addeq	r1, r1, r5
 8003902:	6021      	streq	r1, [r4, #0]
 8003904:	e7ed      	b.n	80038e2 <_free_r+0x22>
 8003906:	461a      	mov	r2, r3
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b10b      	cbz	r3, 8003910 <_free_r+0x50>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d9fa      	bls.n	8003906 <_free_r+0x46>
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	1855      	adds	r5, r2, r1
 8003914:	42a5      	cmp	r5, r4
 8003916:	d10b      	bne.n	8003930 <_free_r+0x70>
 8003918:	6824      	ldr	r4, [r4, #0]
 800391a:	4421      	add	r1, r4
 800391c:	1854      	adds	r4, r2, r1
 800391e:	42a3      	cmp	r3, r4
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	d1e0      	bne.n	80038e6 <_free_r+0x26>
 8003924:	681c      	ldr	r4, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	6053      	str	r3, [r2, #4]
 800392a:	4421      	add	r1, r4
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	e7da      	b.n	80038e6 <_free_r+0x26>
 8003930:	d902      	bls.n	8003938 <_free_r+0x78>
 8003932:	230c      	movs	r3, #12
 8003934:	6003      	str	r3, [r0, #0]
 8003936:	e7d6      	b.n	80038e6 <_free_r+0x26>
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	1961      	adds	r1, r4, r5
 800393c:	428b      	cmp	r3, r1
 800393e:	bf04      	itt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	bf04      	itt	eq
 8003948:	1949      	addeq	r1, r1, r5
 800394a:	6021      	streq	r1, [r4, #0]
 800394c:	6054      	str	r4, [r2, #4]
 800394e:	e7ca      	b.n	80038e6 <_free_r+0x26>
 8003950:	b003      	add	sp, #12
 8003952:	bd30      	pop	{r4, r5, pc}
 8003954:	2000010c 	.word	0x2000010c

08003958 <_read_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d07      	ldr	r5, [pc, #28]	; (8003978 <_read_r+0x20>)
 800395c:	4604      	mov	r4, r0
 800395e:	4608      	mov	r0, r1
 8003960:	4611      	mov	r1, r2
 8003962:	2200      	movs	r2, #0
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f7fd fa4c 	bl	8000e04 <_read>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_read_r+0x1e>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_read_r+0x1e>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	20000114 	.word	0x20000114

0800397c <_fstat_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d07      	ldr	r5, [pc, #28]	; (800399c <_fstat_r+0x20>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	f7fd fa80 	bl	8000e8e <_fstat>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d102      	bne.n	8003998 <_fstat_r+0x1c>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	b103      	cbz	r3, 8003998 <_fstat_r+0x1c>
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	bd38      	pop	{r3, r4, r5, pc}
 800399a:	bf00      	nop
 800399c:	20000114 	.word	0x20000114

080039a0 <_isatty_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4d06      	ldr	r5, [pc, #24]	; (80039bc <_isatty_r+0x1c>)
 80039a4:	2300      	movs	r3, #0
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fd fa7f 	bl	8000eae <_isatty>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_isatty_r+0x1a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_isatty_r+0x1a>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000114 	.word	0x20000114

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr
